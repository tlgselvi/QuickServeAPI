{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Financial Management Dashboard\n\n## Overview\n\nThis is a full-stack financial management application built with React and Express.js. The application allows users to manage personal and company bank accounts, track income and expense transactions, and perform transfers between accounts. It features a modern, responsive UI built with shadcn/ui components and Tailwind CSS, with data persistence using PostgreSQL and Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for development and production builds\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **API Design**: RESTful API with JSON responses\n- **Language**: TypeScript with ES modules\n- **Request Handling**: Express middleware for JSON parsing, CORS, and logging\n- **Error Handling**: Centralized error handling middleware\n- **Development**: Hot reload with Vite integration in development mode\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle migrations for database schema versioning\n- **Connection Pooling**: Neon serverless connection pooling\n- **Fallback Storage**: In-memory storage implementation for development/testing\n\n### Database Schema\n- **Accounts Table**: Stores bank account information (personal/company types, balances, currency)\n- **Transactions Table**: Records all financial transactions with categories and transfer linking\n- **Users Table**: User authentication and management (prepared for future use)\n\n### API Structure\n- **GET /api/accounts**: Retrieve all user accounts\n- **POST /api/accounts**: Create new bank accounts\n- **GET /api/transactions**: Retrieve transaction history\n- **POST /api/transactions**: Create new transactions and update account balances\n- **Transfer Operations**: Handled via transaction pairs with virman linking\n\n### Authentication & Authorization\n- **Current State**: Basic session handling prepared with connect-pg-simple\n- **Future Ready**: User schema and authentication hooks in place\n- **Session Storage**: PostgreSQL-based session storage configuration\n\n### Development & Deployment\n- **Environment**: Replit-optimized with cartographer and dev banner plugins\n- **Build Process**: Vite for frontend, esbuild for backend bundling\n- **Development Server**: Concurrent frontend/backend development with proxy setup\n- **Production**: Static file serving with Express for SPA routing\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL serverless driver for Neon database\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-kit**: Database migration and schema management tools\n- **express**: Web application framework for the backend API\n- **@tanstack/react-query**: Server state management and caching\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **clsx**: Conditional className utility\n- **lucide-react**: Icon library for React components\n\n### Development Tools\n- **vite**: Frontend build tool and development server\n- **typescript**: Type checking and enhanced developer experience\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n- **wouter**: Lightweight routing library for React\n\n### Validation and Forms\n- **zod**: Schema validation library\n- **react-hook-form**: Performant forms with validation\n- **@hookform/resolvers**: Resolvers for various validation libraries\n\n### Database and Sessions\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **ws**: WebSocket implementation for Neon database connections","size_bytes":4243},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { pool } from \"./db\";\n\nconst app = express();\n\n// Session configuration\nconst PgSession = connectPgSimple(session);\napp.use(session({\n  store: new PgSession({\n    pool: pool, // Use raw Neon pool instead of Drizzle client\n    tableName: 'session', // Table name for sessions\n    createTableIfMissing: true, // Automatically create table\n  }),\n  secret: process.env.SESSION_SECRET || 'your-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production', // HTTPS in production\n    httpOnly: true, // Prevent XSS\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'lax', // CSRF protection\n  },\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2822},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertAccountSchema, insertTransactionSchema, loginSchema, registerSchema, forgotPasswordSchema, resetPasswordSchema, insertTeamSchema, updateTeamSchema, insertTeamMemberSchema, inviteUserSchema, acceptInviteSchema, insertSystemAlertSchema, importTransactionJsonSchema, exportTransactionsByDateSchema, transactionJsonFileSchema, Permission, UserRole, TeamPermission, hasTeamPermission, TeamRole } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport { randomBytes, randomUUID } from \"crypto\";\nimport { requireAuth, requirePermission, requireAccountTypeAccess, optionalAuth, logAccess, AuthenticatedRequest } from \"./middleware/auth\";\nimport { updateUserRoleSchema, updateUserStatusSchema } from \"@shared/schema\";\nimport { alertService } from \"./alert-service\";\nimport { transactionJsonService } from \"./transaction-json-service\";\n\n// Extend Express session to include user\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    user?: {\n      id: string;\n      email: string;\n      username: string;\n      role: string;\n      isActive: boolean;\n    };\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Account routes - Protected by authentication and account type permissions\n  app.get(\"/api/accounts\", \n    requireAuth, \n    requirePermission(Permission.VIEW_PERSONAL_ACCOUNTS, Permission.VIEW_COMPANY_ACCOUNTS, Permission.VIEW_ALL_ACCOUNTS),\n    logAccess(\"VIEW_ACCOUNTS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const accounts = await storage.getAccounts();\n        \n        // Filter accounts based on user role\n        const filteredAccounts = accounts.filter(account => {\n          if (req.user!.role === UserRole.ADMIN) return true;\n          if (req.user!.role === UserRole.COMPANY_USER) return true; // Can see both\n          if (req.user!.role === UserRole.PERSONAL_USER) return account.type === 'personal';\n          return false;\n        });\n        \n        res.json(filteredAccounts);\n      } catch (error) {\n        res.status(500).json({ error: \"Hesaplar yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/accounts\", \n    requireAuth,\n    logAccess(\"CREATE_ACCOUNT\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const validatedData = insertAccountSchema.parse(req.body);\n        \n        // Check if user can create this account type\n        const accountType = validatedData.type as 'personal' | 'company';\n        if (req.user!.role === UserRole.PERSONAL_USER && accountType === 'company') {\n          return res.status(403).json({ error: \"Şirket hesabı oluşturma yetkiniz bulunmuyor\" });\n        }\n        \n        const account = await storage.createAccount(validatedData);\n        res.json(account);\n      } catch (error) {\n        res.status(400).json({ error: \"Geçersiz hesap verisi\" });\n      }\n    }\n  );\n\n  // Transaction routes - Protected by authentication and account type permissions\n  app.get(\"/api/transactions\", \n    requireAuth,\n    requirePermission(Permission.VIEW_PERSONAL_TRANSACTIONS, Permission.VIEW_COMPANY_TRANSACTIONS, Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"VIEW_TRANSACTIONS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const transactions = await storage.getTransactions();\n        const accounts = await storage.getAccounts();\n        \n        // Filter transactions based on user role and account access\n        const allowedAccountIds = accounts\n          .filter(account => {\n            if (req.user!.role === UserRole.ADMIN) return true;\n            if (req.user!.role === UserRole.COMPANY_USER) return true; // Can see both\n            if (req.user!.role === UserRole.PERSONAL_USER) return account.type === 'personal';\n            return false;\n          })\n          .map(account => account.id);\n        \n        const filteredTransactions = transactions.filter(transaction => \n          allowedAccountIds.includes(transaction.accountId)\n        );\n        \n        res.json(filteredTransactions);\n      } catch (error) {\n        res.status(500).json({ error: \"İşlemler yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/transactions\", \n    requireAuth,\n    logAccess(\"CREATE_TRANSACTION\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const validatedData = insertTransactionSchema.parse(req.body);\n        \n        // Validate transaction type for this endpoint\n        if (!['income', 'expense'].includes(validatedData.type)) {\n          return res.status(400).json({ error: \"Bu endpoint sadece gelir ve gider işlemlerini destekler\" });\n        }\n        \n        // Check if user can access the target account\n        const account = await storage.getAccount(validatedData.accountId);\n        if (!account) {\n          return res.status(404).json({ error: \"Hesap bulunamadı\" });\n        }\n        \n        // Check account type permissions\n        if (req.user!.role === UserRole.PERSONAL_USER && account.type === 'company') {\n          return res.status(403).json({ error: \"Şirket hesabında işlem yapma yetkiniz bulunmuyor\" });\n        }\n        \n        // Calculate balance adjustment\n        let balanceAdjustment = 0;\n        const amount = parseFloat(validatedData.amount);\n        \n        if (validatedData.type === 'income') {\n          balanceAdjustment = amount;\n        } else if (validatedData.type === 'expense') {\n          balanceAdjustment = -amount;\n        }\n        \n        // Use atomic transaction operation\n        const transaction = await storage.performTransaction(validatedData, balanceAdjustment);\n        \n        res.json(transaction);\n      } catch (error) {\n        res.status(400).json({ error: \"Geçersiz işlem verisi\" });\n      }\n    }\n  );\n\n  // Money transfer (virman) route - Protected by authentication\n  app.post(\"/api/virman\", \n    requireAuth,\n    logAccess(\"TRANSFER_FUNDS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { fromAccountId, toAccountId, amount, description } = req.body;\n        \n        const fromAccount = await storage.getAccount(fromAccountId);\n        const toAccount = await storage.getAccount(toAccountId);\n        \n        if (!fromAccount || !toAccount) {\n          return res.status(400).json({ error: \"Hesap bulunamadı\" });\n        }\n        \n        // Check if user can access both accounts\n        const canAccessFrom = req.user!.role === UserRole.ADMIN || \n                              req.user!.role === UserRole.COMPANY_USER ||\n                              (req.user!.role === UserRole.PERSONAL_USER && fromAccount.type === 'personal');\n        \n        const canAccessTo = req.user!.role === UserRole.ADMIN || \n                            req.user!.role === UserRole.COMPANY_USER ||\n                            (req.user!.role === UserRole.PERSONAL_USER && toAccount.type === 'personal');\n        \n        if (!canAccessFrom || !canAccessTo) {\n          return res.status(403).json({ error: \"Bu hesaplar arasında virman yapma yetkiniz bulunmuyor\" });\n        }\n        \n        const transferAmount = parseFloat(amount);\n        const virmanId = randomUUID();\n        \n        // Use atomic transfer operation\n        const { outTransaction, inTransaction } = await storage.performTransfer(\n          fromAccountId, \n          toAccountId, \n          transferAmount, \n          description || 'Hesaplar arası transfer',\n          virmanId\n        );\n        \n        // Get updated balances\n        const updatedFromAccount = await storage.getAccount(fromAccountId);\n        const updatedToAccount = await storage.getAccount(toAccountId);\n        \n        res.json({\n          message: 'Virman başarılı',\n          fromBalance: parseFloat(updatedFromAccount?.balance || '0'),\n          toBalance: parseFloat(updatedToAccount?.balance || '0'),\n          transactions: [outTransaction, inTransaction]\n        });\n        \n      } catch (error) {\n        if (error instanceof Error && error.message === 'Yetersiz bakiye') {\n          return res.status(400).json({ error: \"Yetersiz bakiye\" });\n        }\n        res.status(400).json({ error: \"Virman işleminde hata oluştu\" });\n      }\n    }\n  );\n\n  // Dashboard route - Protected by authentication with role-based filtering\n  app.get(\"/api/dashboard\", \n    requireAuth,\n    logAccess(\"VIEW_DASHBOARD\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const dashboardData = await storage.getDashboardStats();\n        const accounts = await storage.getAccounts();\n        \n        // Filter dashboard data based on user role\n        if (req.user!.role === UserRole.ADMIN) {\n          // Admin sees all data\n          res.json(dashboardData);\n        } else if (req.user!.role === UserRole.COMPANY_USER) {\n          // Company user sees all data (both personal and company)\n          res.json(dashboardData);\n        } else if (req.user!.role === UserRole.PERSONAL_USER) {\n          // Personal user only sees personal account data\n          const personalAccounts = accounts.filter(account => account.type === 'personal');\n          const personalBalance = personalAccounts.reduce((sum, account) => sum + parseFloat(account.balance), 0);\n          \n          res.json({\n            totalBalance: personalBalance,\n            companyBalance: 0, // Personal users don't see company data\n            personalBalance: personalBalance\n          });\n        } else {\n          res.json({ totalBalance: 0, companyBalance: 0, personalBalance: 0 });\n        }\n      } catch (error) {\n        res.status(500).json({ error: \"Dashboard verisi yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    console.log(\"🔐 Register endpoint hit\");\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      console.log(\"✅ Validation passed for:\", validatedData.email);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        console.log(\"❌ Email already exists\");\n        return res.status(400).json({ error: \"Bu email adresi zaten kullanılıyor\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUsername) {\n        console.log(\"❌ Username already exists\");\n        return res.status(400).json({ error: \"Bu kullanıcı adı zaten kullanılıyor\" });\n      }\n      \n      // Hash password\n      console.log(\"🔐 Hashing password...\");\n      const hashedPassword = await bcrypt.hash(validatedData.password, 12);\n      \n      // Create user\n      console.log(\"👤 Creating user...\");\n      const user = await storage.createUser({\n        username: validatedData.username,\n        email: validatedData.email,\n        password: hashedPassword\n      });\n      \n      // Don't return password\n      const { password, ...userWithoutPassword } = user;\n      console.log(\"✅ User created successfully:\", userWithoutPassword.id);\n      \n      const response = { \n        message: \"Kullanıcı başarıyla oluşturuldu\",\n        user: userWithoutPassword \n      };\n      console.log(\"📤 Sending response:\", response);\n      res.status(201).json(response);\n    } catch (error) {\n      console.error(\"❌ Register error:\", error);\n      res.status(400).json({ error: \"Kayıt sırasında hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user) {\n        return res.status(401).json({ error: \"Geçersiz email veya şifre\" });\n      }\n      \n      // Check password\n      const isValidPassword = await bcrypt.compare(validatedData.password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Geçersiz email veya şifre\" });\n      }\n      \n      // Check if user account is active\n      if (!user.isActive) {\n        return res.status(403).json({\n          error: \"Hesabınız pasif durumda. Lütfen yönetici ile iletişime geçin\",\n          code: \"ACCOUNT_INACTIVE\"\n        });\n      }\n      \n      // Update last login\n      await storage.updateLastLogin(user.id);\n      \n      // Set session\n      req.session.userId = user.id;\n      req.session.user = {\n        id: user.id,\n        email: user.email,\n        username: user.username,\n        role: user.role,\n        isActive: user.isActive\n      };\n      \n      console.log(\"✅ Session created for user:\", user.id);\n      \n      // Don't return password\n      const { password, ...userWithoutPassword } = user;\n      res.json({ \n        message: \"Giriş başarılı\",\n        user: userWithoutPassword \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ error: \"Giriş sırasında hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", \n    requireAuth,\n    logAccess(\"LOGOUT\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        if (req.session.userId) {\n          console.log(\"🚪 Logging out user:\", req.session.userId);\n          \n          // Destroy session\n          req.session.destroy((err) => {\n            if (err) {\n              console.error(\"❌ Session destruction error:\", err);\n              return res.status(500).json({ error: \"Çıkış sırasında hata oluştu\" });\n            }\n            res.clearCookie('connect.sid'); // Clear session cookie\n            res.json({ message: \"Çıkış başarılı\" });\n          });\n        } else {\n          res.json({ message: \"Zaten çıkış yapılmış\" });\n        }\n      } catch (error) {\n        console.error(\"❌ Logout error:\", error);\n        res.status(500).json({ error: \"Çıkış sırasında hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const validatedData = forgotPasswordSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return res.json({ message: \"Eğer bu email kayıtlıysa, şifre sıfırlama linki gönderilecek\" });\n      }\n      \n      // Generate reset token\n      const resetToken = randomBytes(32).toString('hex');\n      const resetTokenExpires = new Date(Date.now() + 3600000); // 1 hour\n      \n      await storage.setResetToken(validatedData.email, resetToken, resetTokenExpires);\n      \n      // TODO: Send email with reset link\n      console.log(`Reset token for ${validatedData.email}: ${resetToken}`);\n      \n      res.json({ message: \"Eğer bu email kayıtlıysa, şifre sıfırlama linki gönderilecek\" });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ error: \"Şifre sıfırlama isteği sırasında hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const validatedData = resetPasswordSchema.parse(req.body);\n      \n      // Find user by reset token\n      const users = await storage.getUser(\"\"); // This is a hack, we need a method to find by reset token\n      // TODO: Add findUserByResetToken method to storage\n      \n      // For now, we'll skip the token validation implementation\n      res.status(501).json({ error: \"Şifre sıfırlama henüz tam olarak implementasyon aşamasında\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(400).json({ error: \"Şifre sıfırlama sırasında hata oluştu\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", \n    requireAuth,\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        // Return current user from session\n        res.json({\n          user: req.user\n        });\n      } catch (error) {\n        console.error(\"❌ Get user error:\", error);\n        res.status(500).json({ error: \"Kullanıcı bilgileri alınırken hata oluştu\" });\n      }\n    }\n  );\n\n  // Admin User Management Routes\n  app.get(\"/api/admin/users\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_USERS, Permission.VIEW_USERS),\n    logAccess(\"VIEW_ALL_USERS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const users = await storage.getAllUsers();\n        \n        // Remove password from all users for security\n        const safeUsers = users.map(({ password, ...user }) => user);\n        \n        res.json(safeUsers);\n      } catch (error) {\n        console.error(\"Get all users error:\", error);\n        res.status(500).json({ error: \"Kullanıcılar yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.put(\"/api/admin/users/:userId/role\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_USERS),\n    logAccess(\"CHANGE_USER_ROLE\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { userId } = req.params;\n        try {\n          var validatedData = updateUserRoleSchema.parse(req.body);\n        } catch (error) {\n          return res.status(400).json({ error: \"Geçersiz veri formatı\" });\n        }\n        const { role } = validatedData;\n\n        // Prevent self role change to avoid lockout\n        if (userId === req.user!.id) {\n          return res.status(403).json({ error: \"Kendi rolünüzü değiştiremezsiniz\" });\n        }\n\n        const updatedUser = await storage.updateUserRole(userId, role);\n        if (!updatedUser) {\n          return res.status(404).json({ error: \"Kullanıcı bulunamadı\" });\n        }\n\n        // Remove password for security\n        const { password, ...safeUser } = updatedUser;\n        \n        res.json({ \n          message: \"Kullanıcı rolü başarıyla değiştirildi\",\n          user: safeUser \n        });\n      } catch (error) {\n        console.error(\"Update user role error:\", error);\n        res.status(500).json({ error: \"Rol değiştirilirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.put(\"/api/admin/users/:userId/status\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_USERS),\n    logAccess(\"CHANGE_USER_STATUS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { userId } = req.params;\n        try {\n          var validatedData = updateUserStatusSchema.parse(req.body);\n        } catch (error) {\n          return res.status(400).json({ error: \"Geçersiz veri formatı\" });\n        }\n        const { isActive } = validatedData;\n\n        // Prevent self deactivation to avoid lockout\n        if (userId === req.user!.id && !isActive) {\n          return res.status(403).json({ error: \"Kendi hesabınızı pasif hale getiremezsiniz\" });\n        }\n\n        const updatedUser = await storage.updateUserStatus(userId, isActive);\n        if (!updatedUser) {\n          return res.status(404).json({ error: \"Kullanıcı bulunamadı\" });\n        }\n\n        // Remove password for security\n        const { password, ...safeUser } = updatedUser;\n        \n        res.json({ \n          message: `Kullanıcı ${isActive ? 'aktif' : 'pasif'} hale getirildi`,\n          user: safeUser \n        });\n      } catch (error) {\n        console.error(\"Update user status error:\", error);\n        res.status(500).json({ error: \"Kullanıcı durumu değiştirilirken hata oluştu\" });\n      }\n    }\n  );\n\n  // ==================== TEAM MANAGEMENT API ROUTES ====================\n\n  // Team CRUD routes\n  app.post(\"/api/teams\",\n    requireAuth,\n    logAccess(\"CREATE_TEAM\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const validatedData = insertTeamSchema.parse(req.body);\n        \n        // Set the current user as the team owner\n        const teamData = {\n          ...validatedData,\n          ownerId: req.user!.id\n        };\n        \n        const team = await storage.createTeam(teamData);\n        \n        // Automatically add the creator as team owner member\n        await storage.addTeamMember({\n          teamId: team.id,\n          userId: req.user!.id,\n          teamRole: 'owner',\n          permissions: null,\n          isActive: true\n        });\n        \n        res.json(team);\n      } catch (error) {\n        console.error(\"Create team error:\", error);\n        res.status(400).json({ error: \"Takım oluşturulurken hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/teams\",\n    requireAuth,\n    logAccess(\"VIEW_TEAMS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const teams = await storage.getTeamsByUserId(req.user!.id);\n        res.json(teams);\n      } catch (error) {\n        console.error(\"Get teams error:\", error);\n        res.status(500).json({ error: \"Takımlar yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/teams/:teamId\",\n    requireAuth,\n    logAccess(\"VIEW_TEAM_DETAILS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Check if user is a member of this team\n        const teamMember = await storage.getTeamMember(teamId, req.user!.id);\n        if (!teamMember) {\n          return res.status(403).json({ error: \"Bu takıma erişim yetkiniz bulunmuyor\" });\n        }\n        \n        const team = await storage.getTeam(teamId);\n        if (!team) {\n          return res.status(404).json({ error: \"Takım bulunamadı\" });\n        }\n        \n        res.json(team);\n      } catch (error) {\n        console.error(\"Get team error:\", error);\n        res.status(500).json({ error: \"Takım bilgileri yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.put(\"/api/teams/:teamId\",\n    requireAuth,\n    logAccess(\"UPDATE_TEAM\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Check if user has team management permission  \n        const userRole = await storage.getUserTeamRole(teamId, req.user!.id);\n        if (!userRole || !(userRole === TeamRole.OWNER || userRole === TeamRole.ADMIN)) {\n          return res.status(403).json({ error: \"Takım düzenleme yetkiniz bulunmuyor\" });\n        }\n        \n        // SECURITY FIX: Use secure update schema that only allows name/description\n        const validatedData = updateTeamSchema.parse(req.body);\n        const updatedTeam = await storage.updateTeam(teamId, validatedData);\n        \n        if (!updatedTeam) {\n          return res.status(404).json({ error: \"Takım bulunamadı\" });\n        }\n        \n        res.json(updatedTeam);\n      } catch (error) {\n        console.error(\"Update team error:\", error);\n        res.status(400).json({ error: \"Takım güncellenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.delete(\"/api/teams/:teamId\",\n    requireAuth,\n    logAccess(\"DELETE_TEAM\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Only team owner can delete the team\n        const team = await storage.getTeam(teamId);\n        if (!team || team.ownerId !== req.user!.id) {\n          return res.status(403).json({ error: \"Sadece takım sahibi takımı silebilir\" });\n        }\n        \n        const deleted = await storage.deleteTeam(teamId);\n        if (!deleted) {\n          return res.status(404).json({ error: \"Takım bulunamadı\" });\n        }\n        \n        res.json({ message: \"Takım başarıyla silindi\" });\n      } catch (error) {\n        console.error(\"Delete team error:\", error);\n        res.status(500).json({ error: \"Takım silinirken hata oluştu\" });\n      }\n    }\n  );\n\n  // Team Member Management routes\n  app.get(\"/api/teams/:teamId/members\",\n    requireAuth,\n    logAccess(\"VIEW_TEAM_MEMBERS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Check if user is a member of this team\n        const teamMember = await storage.getTeamMember(teamId, req.user!.id);\n        if (!teamMember) {\n          return res.status(403).json({ error: \"Bu takıma erişim yetkiniz bulunmuyor\" });\n        }\n        \n        const members = await storage.getTeamMembers(teamId);\n        res.json(members);\n      } catch (error) {\n        console.error(\"Get team members error:\", error);\n        res.status(500).json({ error: \"Takım üyeleri yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/teams/:teamId/members\",\n    requireAuth,\n    logAccess(\"ADD_TEAM_MEMBER\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Check if user has invite members permission\n        const userRole = await storage.getUserTeamRole(teamId, req.user!.id);\n        if (!userRole || !hasTeamPermission(userRole as any, TeamPermission.INVITE_MEMBERS)) {\n          return res.status(403).json({ error: \"Üye ekleme yetkiniz bulunmuyor\" });\n        }\n        \n        const validatedData = insertTeamMemberSchema.parse(req.body);\n        const member = await storage.addTeamMember(validatedData);\n        \n        res.json(member);\n      } catch (error) {\n        console.error(\"Add team member error:\", error);\n        res.status(400).json({ error: \"Takım üyesi eklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.put(\"/api/teams/:teamId/members/:userId\",\n    requireAuth,\n    logAccess(\"UPDATE_TEAM_MEMBER\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId, userId } = req.params;\n        \n        // SECURITY FIX: Check if user has manage roles permission OR is owner\n        const userRole = await storage.getUserTeamRole(teamId, req.user!.id);\n        const team = await storage.getTeam(teamId);\n        \n        const isOwner = team?.ownerId === req.user!.id;\n        const hasManagePermission = userRole && (userRole === TeamRole.OWNER || userRole === TeamRole.ADMIN);\n        \n        if (!isOwner && !hasManagePermission) {\n          return res.status(403).json({ error: \"Rol düzenleme yetkiniz bulunmuyor\" });\n        }\n        \n        // SECURITY FIX: Prevent demoting/changing team owner\n        if (team && team.ownerId === userId) {\n          return res.status(403).json({ error: \"Takım sahibinin rolü değiştirilemez\" });\n        }\n        \n        const member = await storage.getTeamMember(teamId, userId);\n        if (!member) {\n          return res.status(404).json({ error: \"Takım üyesi bulunamadı\" });\n        }\n        \n        // SECURITY FIX: Restrict what can be updated - only teamRole allowed \n        const allowedUpdates = { teamRole: req.body.teamRole };\n        if (!allowedUpdates.teamRole) {\n          return res.status(400).json({ error: \"Geçersiz güncelleme verisi\" });\n        }\n        \n        const updatedMember = await storage.updateTeamMember(member.id, allowedUpdates);\n        \n        res.json(updatedMember);\n      } catch (error) {\n        console.error(\"Update team member error:\", error);\n        res.status(400).json({ error: \"Takım üyesi güncellenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.delete(\"/api/teams/:teamId/members/:userId\",\n    requireAuth,\n    logAccess(\"REMOVE_TEAM_MEMBER\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId, userId } = req.params;\n        \n        // SECURITY FIX: Check if user has remove members permission OR is owner\n        const userRole = await storage.getUserTeamRole(teamId, req.user!.id);\n        const team = await storage.getTeam(teamId);\n        \n        const isOwner = team?.ownerId === req.user!.id;\n        const hasRemovePermission = userRole && (userRole === TeamRole.OWNER || userRole === TeamRole.ADMIN);\n        \n        if (!isOwner && !hasRemovePermission) {\n          return res.status(403).json({ error: \"Üye çıkarma yetkiniz bulunmuyor\" });\n        }\n        \n        // SECURITY FIX: Cannot remove team owner - ENFORCED PROTECTION\n        if (team && team.ownerId === userId) {\n          return res.status(403).json({ error: \"Takım sahibi çıkarılamaz\" });\n        }\n        \n        // SECURITY FIX: Verify target member exists before removal\n        const targetMember = await storage.getTeamMember(teamId, userId);\n        if (!targetMember) {\n          return res.status(404).json({ error: \"Takım üyesi bulunamadı\" });\n        }\n        \n        const removed = await storage.removeTeamMember(teamId, userId);\n        if (!removed) {\n          return res.status(500).json({ error: \"Takım üyesi çıkarılırken hata oluştu\" });\n        }\n        \n        res.json({ \n          message: \"Takım üyesi başarıyla çıkarıldı\",\n          removedUserId: userId\n        });\n      } catch (error) {\n        console.error(\"Remove team member error:\", error);\n        res.status(500).json({ error: \"Takım üyesi çıkarılırken hata oluştu\" });\n      }\n    }\n  );\n\n  // Team Invite System routes\n  app.post(\"/api/teams/:teamId/invites\",\n    requireAuth,\n    logAccess(\"CREATE_TEAM_INVITE\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Check if user has invite members permission\n        const userRole = await storage.getUserTeamRole(teamId, req.user!.id);\n        if (!userRole || !hasTeamPermission(userRole as any, TeamPermission.INVITE_MEMBERS)) {\n          return res.status(403).json({ error: \"Davet gönderme yetkiniz bulunmuyor\" });\n        }\n        \n        const validatedData = inviteUserSchema.parse(req.body);\n        \n        // Generate invite token\n        const inviteToken = randomBytes(32).toString('hex');\n        const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n        \n        const invite = await storage.createInvite({\n          teamId: validatedData.teamId,\n          inviterUserId: req.user!.id,\n          invitedEmail: validatedData.email,\n          invitedUserId: null,\n          teamRole: validatedData.teamRole,\n          status: 'pending',\n          inviteToken,\n          expiresAt\n        });\n        \n        // TODO: Send email invitation\n        console.log(`Team invite created: ${inviteToken} for ${validatedData.email}`);\n        \n        res.json({ \n          message: \"Davet başarıyla gönderildi\",\n          inviteId: invite.id\n        });\n      } catch (error) {\n        console.error(\"Create invite error:\", error);\n        res.status(400).json({ error: \"Davet oluşturulurken hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/teams/:teamId/invites\",\n    requireAuth,\n    logAccess(\"VIEW_TEAM_INVITES\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { teamId } = req.params;\n        \n        // Check if user has team management permission\n        const userRole = await storage.getUserTeamRole(teamId, req.user!.id);\n        if (!userRole || !hasTeamPermission(userRole as any, TeamPermission.MANAGE_TEAM)) {\n          return res.status(403).json({ error: \"Davet görüntüleme yetkiniz bulunmuyor\" });\n        }\n        \n        const invites = await storage.getTeamInvites(teamId);\n        res.json(invites);\n      } catch (error) {\n        console.error(\"Get team invites error:\", error);\n        res.status(500).json({ error: \"Davetler yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/invites/accept\",\n    requireAuth,\n    logAccess(\"ACCEPT_TEAM_INVITE\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const validatedData = acceptInviteSchema.parse(req.body);\n        \n        const invite = await storage.getInviteByToken(validatedData.token);\n        if (!invite) {\n          return res.status(404).json({ error: \"Geçersiz davet linki\" });\n        }\n        \n        // SECURITY FIX: Strict status and expiry checks\n        if (invite.status !== 'pending') {\n          return res.status(400).json({ error: \"Bu davet zaten işleme alınmış\" });\n        }\n        \n        // SECURITY FIX: Enforce expiry check\n        const now = new Date();\n        if (invite.expiresAt <= now) {\n          await storage.updateInviteStatus(invite.id, 'expired');\n          return res.status(400).json({ error: \"Davet süresi dolmuş\" });\n        }\n        \n        // SECURITY FIX: Strict email verification\n        if (invite.invitedEmail !== req.user!.email) {\n          return res.status(403).json({ error: \"Bu davet size gönderilmemiş\" });\n        }\n        \n        // SECURITY FIX: Check if user is already a team member\n        const existingMember = await storage.getTeamMember(invite.teamId, req.user!.id);\n        if (existingMember) {\n          return res.status(400).json({ error: \"Bu takımın zaten üyesisiniz\" });\n        }\n        \n        // SECURITY FIX: Verify team still exists and is active\n        const team = await storage.getTeam(invite.teamId);\n        if (!team || !team.isActive) {\n          return res.status(400).json({ error: \"Davet edilen takım artık mevcut değil\" });\n        }\n        \n        // Add user to team - atomic operation\n        try {\n          await storage.addTeamMember({\n            teamId: invite.teamId,\n            userId: req.user!.id,\n            teamRole: invite.teamRole,\n            permissions: null,\n            isActive: true\n          });\n          \n          // Update invite status only after successful team addition\n          await storage.updateInviteStatus(invite.id, 'accepted', req.user!.id);\n          \n          res.json({ \n            message: \"Takım davetini başarıyla kabul ettiniz\",\n            teamId: invite.teamId,\n            teamName: team.name\n          });\n        } catch (memberError) {\n          console.error(\"Add team member error:\", memberError);\n          res.status(500).json({ error: \"Takıma katılım sırasında hata oluştu\" });\n        }\n        \n      } catch (error) {\n        console.error(\"Accept invite error:\", error);\n        res.status(400).json({ error: \"Davet kabul edilirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/invites/:inviteId/decline\",\n    requireAuth,\n    logAccess(\"DECLINE_TEAM_INVITE\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { inviteId } = req.params;\n        \n        const invite = await storage.getInvite(inviteId);\n        if (!invite) {\n          return res.status(404).json({ error: \"Davet bulunamadı\" });\n        }\n        \n        if (invite.invitedEmail !== req.user!.email) {\n          return res.status(403).json({ error: \"Bu davet size gönderilmemiş\" });\n        }\n        \n        await storage.updateInviteStatus(inviteId, 'declined');\n        \n        res.json({ message: \"Takım daveti reddedildi\" });\n      } catch (error) {\n        console.error(\"Decline invite error:\", error);\n        res.status(500).json({ error: \"Davet reddedilirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/user/invites\",\n    requireAuth,\n    logAccess(\"VIEW_USER_INVITES\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const invites = await storage.getPendingInvitesByEmail(req.user!.email);\n        res.json(invites);\n      } catch (error) {\n        console.error(\"Get user invites error:\", error);\n        res.status(500).json({ error: \"Davetleriniz yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  // Export API routes - Protected by authentication\n  app.get(\"/api/export/csv\",\n    requireAuth,\n    requirePermission(Permission.VIEW_PERSONAL_TRANSACTIONS, Permission.VIEW_COMPANY_TRANSACTIONS, Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"EXPORT_CSV\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        // CSV writer handled manually for security\n        const accounts = await storage.getAccounts();\n        const transactions = await storage.getTransactions();\n        \n        // Filter accounts and transactions based on user role\n        const allowedAccountIds = accounts\n          .filter(account => {\n            if (req.user!.role === UserRole.ADMIN) return true;\n            if (req.user!.role === UserRole.COMPANY_USER) return true;\n            if (req.user!.role === UserRole.PERSONAL_USER) return account.type === 'personal';\n            return false;\n          })\n          .map(account => account.id);\n        \n        const filteredAccounts = accounts.filter(account => \n          allowedAccountIds.includes(account.id)\n        );\n        \n        const filteredTransactions = transactions.filter(transaction => \n          allowedAccountIds.includes(transaction.accountId)\n        );\n\n        // Safe CSV escaping function to prevent injection\n        const escapeCsvValue = (value: string | number): string => {\n          if (value == null) return '';\n          let escaped = String(value).trimStart(); // Remove leading whitespace\n          // Neutralize formula injection (Excel formula prefixes)\n          if (escaped.match(/^[=+\\-@]/)) {\n            escaped = \"'\" + escaped;\n          }\n          // Always wrap in quotes for safety\n          escaped = '\"' + escaped.replace(/\"/g, '\"\"') + '\"';\n          return escaped;\n        };\n\n        // Create safe CSV data with UNIVERSAL escaping for all fields\n        const csvData = filteredTransactions.map(transaction => {\n          const account = filteredAccounts.find(acc => acc.id === transaction.accountId);\n          const tipLabel = transaction.type === 'income' ? 'Gelir' : \n                          transaction.type === 'expense' ? 'Gider' : \n                          transaction.type === 'transfer_in' ? 'Gelen Virman' : \n                          'Giden Virman';\n          \n          return {\n            tarih: escapeCsvValue(new Date(transaction.date).toLocaleDateString('tr-TR')),\n            hesap: escapeCsvValue(account ? account.bankName : 'Bilinmeyen'),\n            tip: escapeCsvValue(tipLabel),\n            miktar: escapeCsvValue(transaction.amount),\n            aciklama: escapeCsvValue(transaction.description),\n            kategori: escapeCsvValue(transaction.category || ''),\n            para_birimi: escapeCsvValue(account ? account.currency : 'TRY')\n          };\n        });\n\n        // Set response headers\n        const timestamp = new Date().toISOString().split('T')[0];\n        res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n        res.setHeader('Content-Disposition', `attachment; filename=\"finbot-islemler-${timestamp}.csv\"`);\n        \n        // Add BOM for Turkish characters in Excel\n        res.write('\\uFEFF');\n\n        // Write CSV header\n        const headerRow = 'Tarih,Hesap,İşlem Tipi,Miktar,Açıklama,Kategori,Para Birimi\\n';\n        res.write(headerRow);\n\n        // Write CSV data with safe escaping\n        csvData.forEach(row => {\n          const csvRow = `${row.tarih},${row.hesap},${row.tip},${row.miktar},${row.aciklama},${row.kategori},${row.para_birimi}\\n`;\n          res.write(csvRow);\n        });\n\n        res.end();\n      } catch (error) {\n        console.error(\"CSV export error:\", error);\n        res.status(500).json({ error: \"CSV export sırasında hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/export/pdf\",\n    requireAuth,\n    requirePermission(Permission.VIEW_PERSONAL_TRANSACTIONS, Permission.VIEW_COMPANY_TRANSACTIONS, Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"EXPORT_PDF\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const puppeteer = require('puppeteer');\n        const accounts = await storage.getAccounts();\n        const transactions = await storage.getTransactions();\n        const dashboardStats = await storage.getDashboardStats();\n        \n        // Filter data based on user role\n        const allowedAccountIds = accounts\n          .filter(account => {\n            if (req.user!.role === UserRole.ADMIN) return true;\n            if (req.user!.role === UserRole.COMPANY_USER) return true;\n            if (req.user!.role === UserRole.PERSONAL_USER) return account.type === 'personal';\n            return false;\n          })\n          .map(account => account.id);\n        \n        const filteredAccounts = accounts.filter(account => \n          allowedAccountIds.includes(account.id)\n        );\n        \n        const filteredTransactions = transactions.filter(transaction => \n          allowedAccountIds.includes(transaction.accountId)\n        );\n\n        const formatCurrency = (amount: string) => {\n          const num = parseFloat(amount);\n          return new Intl.NumberFormat('tr-TR', {\n            style: 'currency',\n            currency: 'TRY'\n          }).format(num);\n        };\n\n        // HTML escape function to prevent XSS\n        const escapeHtml = (unsafe: string): string => {\n          if (unsafe == null) return '';\n          return String(unsafe)\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n        };\n\n        // Create HTML content for PDF\n        const htmlContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>FinBot - Finansal Rapor</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 40px; }\n            h1 { color: #333; text-align: center; }\n            h2 { color: #666; border-bottom: 2px solid #eee; padding-bottom: 10px; }\n            .summary { display: flex; justify-content: space-around; margin: 30px 0; }\n            .kpi { text-align: center; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }\n            .kpi-value { font-size: 24px; font-weight: bold; color: #2563eb; }\n            table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n            th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }\n            th { background-color: #f5f5f5; font-weight: bold; }\n            .positive { color: #059669; }\n            .negative { color: #dc2626; }\n          </style>\n        </head>\n        <body>\n          <h1>FinBot - Finansal Rapor</h1>\n          <p style=\"text-align: center; color: #666;\">Rapor Tarihi: ${new Date().toLocaleDateString('tr-TR')}</p>\n          \n          <div class=\"summary\">\n            <div class=\"kpi\">\n              <div>Toplam Nakit</div>\n              <div class=\"kpi-value positive\">${formatCurrency(dashboardStats.totalCash.toString())}</div>\n            </div>\n            <div class=\"kpi\">\n              <div>Toplam Borç</div>\n              <div class=\"kpi-value negative\">${formatCurrency(dashboardStats.totalDebt.toString())}</div>\n            </div>\n            <div class=\"kpi\">\n              <div>Net Bakiye</div>\n              <div class=\"kpi-value\">${formatCurrency(dashboardStats.totalBalance.toString())}</div>\n            </div>\n          </div>\n          \n          <h2>Hesaplar (${filteredAccounts.length})</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Banka</th>\n                <th>Hesap Adı</th>\n                <th>Tip</th>\n                <th>Bakiye</th>\n                <th>Para Birimi</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${filteredAccounts.map(account => `\n                <tr>\n                  <td>${escapeHtml(account.bankName)}</td>\n                  <td>${escapeHtml(account.accountName)}</td>\n                  <td>${account.type === 'company' ? 'Şirket' : 'Kişisel'}</td>\n                  <td class=\"${parseFloat(account.balance) >= 0 ? 'positive' : 'negative'}\">${formatCurrency(account.balance)}</td>\n                  <td>${escapeHtml(account.currency)}</td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n          \n          <h2>Son İşlemler (${filteredTransactions.slice(0, 20).length})</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Tarih</th>\n                <th>Hesap</th>\n                <th>İşlem Tipi</th>\n                <th>Miktar</th>\n                <th>Açıklama</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${filteredTransactions.slice(0, 20).map(transaction => {\n                const account = filteredAccounts.find(acc => acc.id === transaction.accountId);\n                const tipLabel = transaction.type === 'income' ? 'Gelir' : \n                               transaction.type === 'expense' ? 'Gider' : \n                               transaction.type === 'transfer_in' ? 'Gelen Virman' : 'Giden Virman';\n                return `\n                <tr>\n                  <td>${escapeHtml(new Date(transaction.date).toLocaleDateString('tr-TR'))}</td>\n                  <td>${escapeHtml(account ? account.bankName : 'Bilinmeyen')}</td>\n                  <td>${escapeHtml(tipLabel)}</td>\n                  <td class=\"${transaction.type === 'income' || transaction.type === 'transfer_in' ? 'positive' : 'negative'}\">${formatCurrency(transaction.amount)}</td>\n                  <td>${escapeHtml(transaction.description)}</td>\n                </tr>\n                `;\n              }).join('')}\n            </tbody>\n          </table>\n        </body>\n        </html>\n        `;\n\n        // Generate PDF with hardened Puppeteer settings and proper resource management\n        let browser = null;\n        let pdfBuffer;\n        try {\n          browser = await puppeteer.launch({\n            headless: 'new',\n            args: [\n              '--no-sandbox',\n              '--disable-setuid-sandbox',\n              '--disable-dev-shm-usage',\n              '--disable-gpu',\n              '--disable-web-security',\n              '--disable-features=VizDisplayCompositor',\n              '--no-first-run',\n              '--no-zygote',\n              '--single-process'\n            ]\n          });\n          const page = await browser.newPage();\n          await page.setContent(htmlContent, { waitUntil: 'networkidle0' });\n          \n          pdfBuffer = await page.pdf({\n            format: 'A4',\n            margin: { top: '20px', right: '20px', bottom: '20px', left: '20px' }\n          });\n        } finally {\n          if (browser) {\n            await browser.close();\n          }\n        }\n\n        // Set response headers\n        const timestamp = new Date().toISOString().split('T')[0];\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"finbot-rapor-${timestamp}.pdf\"`);\n        \n        res.send(pdfBuffer);\n      } catch (error) {\n        console.error(\"PDF export error:\", error);\n        res.status(500).json({ error: \"PDF export sırasında hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/export/google-sheets\",\n    requireAuth,\n    requirePermission(Permission.VIEW_PERSONAL_TRANSACTIONS, Permission.VIEW_COMPANY_TRANSACTIONS, Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"EXPORT_GOOGLE_SHEETS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { google } = require('googleapis');\n        const { JWT } = require('google-auth-library');\n\n        // Initialize Google Sheets API with service account\n        const auth = new JWT({\n          email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,\n          key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n          scopes: ['https://www.googleapis.com/auth/spreadsheets']\n        });\n\n        const sheets = google.sheets({ version: 'v4', auth });\n        const spreadsheetId = process.env.GOOGLE_SHEET_ID;\n\n        if (!spreadsheetId || !process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !process.env.GOOGLE_PRIVATE_KEY) {\n          return res.status(500).json({ \n            error: \"Google Sheets konfigürasyonu eksik\",\n            message: \"Gerekli environment değişkenleri ayarlanmamış\"\n          });\n        }\n\n        // Get data similar to CSV export\n        const accounts = await storage.getAccounts();\n        const transactions = await storage.getTransactions();\n        \n        // Filter data based on user role\n        const allowedAccountIds = accounts\n          .filter(account => {\n            if (req.user!.role === UserRole.ADMIN) return true;\n            if (req.user!.role === UserRole.COMPANY_USER) return true;\n            if (req.user!.role === UserRole.PERSONAL_USER) return account.type === 'personal';\n            return false;\n          })\n          .map(account => account.id);\n        \n        const filteredAccounts = accounts.filter(account => \n          allowedAccountIds.includes(account.id)\n        );\n        \n        const filteredTransactions = transactions.filter(transaction => \n          allowedAccountIds.includes(transaction.accountId)\n        );\n\n        // Prepare data for Google Sheets\n        const headers = ['Tarih', 'Hesap', 'Tip', 'Miktar', 'Açıklama', 'Kategori'];\n        const sheetData = [headers];\n\n        filteredTransactions.forEach(transaction => {\n          const account = filteredAccounts.find(acc => acc.id === transaction.accountId);\n          const tipLabel = transaction.type === 'income' ? 'Gelir' : \n                          transaction.type === 'expense' ? 'Gider' : \n                          transaction.type === 'transfer_in' ? 'Gelen Virman' : \n                          'Giden Virman';\n          \n          sheetData.push([\n            new Date(transaction.date).toLocaleDateString('tr-TR'),\n            account ? account.bankName : 'Bilinmeyen',\n            tipLabel,\n            transaction.amount,\n            transaction.description,\n            transaction.category || ''\n          ]);\n        });\n\n        // Create a new worksheet with timestamp\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const worksheetTitle = `FinBot-${timestamp}`;\n\n        // First, create the spreadsheet or add a new sheet\n        try {\n          // Try to add a new sheet to the existing spreadsheet\n          await sheets.spreadsheets.batchUpdate({\n            spreadsheetId: spreadsheetId,\n            resource: {\n              requests: [{\n                addSheet: {\n                  properties: {\n                    title: worksheetTitle,\n                    gridProperties: {\n                      rowCount: sheetData.length + 10,\n                      columnCount: headers.length\n                    }\n                  }\n                }\n              }]\n            }\n          });\n        } catch (error) {\n          console.error('Error creating new sheet:', error);\n          // If we can't create a new sheet, we'll use the first sheet\n        }\n\n        // Write data to the sheet\n        const range = `${worksheetTitle}!A1:${String.fromCharCode(65 + headers.length - 1)}${sheetData.length}`;\n        \n        try {\n          await sheets.spreadsheets.values.update({\n            spreadsheetId: spreadsheetId,\n            range: range,\n            valueInputOption: 'RAW',\n            resource: {\n              values: sheetData\n            }\n          });\n        } catch (error) {\n          // Fallback to Sheet1 if the named sheet doesn't work\n          const fallbackRange = `Sheet1!A1:${String.fromCharCode(65 + headers.length - 1)}${sheetData.length}`;\n          await sheets.spreadsheets.values.clear({\n            spreadsheetId: spreadsheetId,\n            range: 'Sheet1!A:Z'\n          });\n          \n          await sheets.spreadsheets.values.update({\n            spreadsheetId: spreadsheetId,\n            range: fallbackRange,\n            valueInputOption: 'RAW',\n            resource: {\n              values: sheetData\n            }\n          });\n        }\n\n        // Generate the Google Sheets URL\n        const sheetUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}`;\n\n        res.json({\n          message: \"Veriler Google Sheets'e başarıyla aktarıldı\",\n          url: sheetUrl,\n          worksheetTitle: worksheetTitle,\n          recordCount: filteredTransactions.length,\n          timestamp: new Date().toISOString()\n        });\n\n      } catch (error) {\n        console.error(\"Google Sheets export error:\", error);\n        res.status(500).json({ \n          error: \"Google Sheets export sırasında hata oluştu\",\n          details: error instanceof Error ? error.message : \"Bilinmeyen hata\"\n        });\n      }\n    }\n  );\n\n  // System Alerts API Routes\n  app.get(\"/api/alerts\",\n    requireAuth,\n    logAccess(\"VIEW_ALERTS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const alerts = await storage.getActiveSystemAlerts();\n        res.json(alerts);\n      } catch (error) {\n        console.error(\"Get alerts error:\", error);\n        res.status(500).json({ error: \"Uyarılar yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/alerts/all\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_SETTINGS), // Only admins can see all alerts\n    logAccess(\"VIEW_ALL_ALERTS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const alerts = await storage.getSystemAlerts();\n        res.json(alerts);\n      } catch (error) {\n        console.error(\"Get all alerts error:\", error);\n        res.status(500).json({ error: \"Tüm uyarılar yüklenirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/alerts/:alertId/dismiss\",\n    requireAuth,\n    logAccess(\"DISMISS_ALERT\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const { alertId } = req.params;\n        const alert = await storage.dismissSystemAlert(alertId);\n        \n        if (!alert) {\n          return res.status(404).json({ error: \"Uyarı bulunamadı\" });\n        }\n        \n        res.json({ message: \"Uyarı başarıyla kapatıldı\", alert });\n      } catch (error) {\n        console.error(\"Dismiss alert error:\", error);\n        res.status(500).json({ error: \"Uyarı kapatılırken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/alerts/run-checks\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_SETTINGS), // Only admins can trigger checks\n    logAccess(\"RUN_ALERT_CHECKS\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        await alertService.runAllChecks();\n        res.json({ message: \"Uyarı kontrolleri başarıyla çalıştırıldı\" });\n      } catch (error) {\n        console.error(\"Run alert checks error:\", error);\n        res.status(500).json({ error: \"Uyarı kontrolleri çalıştırılırken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/alerts\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_SETTINGS),\n    logAccess(\"CREATE_ALERT\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const alertData = insertSystemAlertSchema.parse(req.body);\n        const alert = await storage.createSystemAlert(alertData);\n        res.status(201).json(alert);\n      } catch (error) {\n        console.error(\"Create alert error:\", error);\n        res.status(400).json({ error: \"Uyarı oluşturulurken hata oluştu\" });\n      }\n    }\n  );\n\n  // Transaction JSON Service API Routes\n  app.post(\"/api/transactions/export-json\",\n    requireAuth,\n    requirePermission(Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"EXPORT_TRANSACTIONS_JSON\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const result = await transactionJsonService.exportTransactionsToJson();\n        \n        if (result.success) {\n          res.json({\n            message: result.message,\n            filePath: result.filePath,\n            success: true\n          });\n        } else {\n          res.status(400).json({\n            error: result.message,\n            success: false\n          });\n        }\n      } catch (error) {\n        console.error(\"Export transactions JSON error:\", error);\n        res.status(500).json({ error: \"İşlemler JSON'a aktarılırken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/transactions/import-json\",\n    requireAuth,\n    requirePermission(Permission.MANAGE_SETTINGS),\n    logAccess(\"IMPORT_TRANSACTIONS_JSON\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const validatedData = importTransactionJsonSchema.parse(req.body);\n        const result = await transactionJsonService.importTransactionsFromJson(validatedData.overwriteExisting);\n        \n        if (result.success) {\n          res.json({\n            message: result.message,\n            importedCount: result.importedCount,\n            success: true\n          });\n        } else {\n          res.status(400).json({\n            error: result.message,\n            success: false\n          });\n        }\n      } catch (error) {\n        console.error(\"Import transactions JSON error:\", error);\n        res.status(500).json({ error: \"JSON'dan işlemler içe aktarılırken hata oluştu\" });\n      }\n    }\n  );\n\n  app.get(\"/api/transactions/json-status\",\n    requireAuth,\n    requirePermission(Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"CHECK_TRANSACTIONS_JSON\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const status = await transactionJsonService.checkJsonFile();\n        res.json(status);\n      } catch (error) {\n        console.error(\"Check transactions JSON status error:\", error);\n        res.status(500).json({ error: \"JSON dosya durumu kontrol edilirken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/transactions/export-json-by-date\",\n    requireAuth,\n    requirePermission(Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"EXPORT_TRANSACTIONS_JSON_BY_DATE\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const validatedData = exportTransactionsByDateSchema.parse(req.body);\n\n        const result = await transactionJsonService.exportTransactionsByDateRange(\n          new Date(validatedData.startDate),\n          new Date(validatedData.endDate)\n        );\n        \n        if (result.success) {\n          res.json({\n            message: result.message,\n            filePath: result.filePath,\n            success: true\n          });\n        } else {\n          res.status(400).json({\n            error: result.message,\n            success: false\n          });\n        }\n      } catch (error) {\n        console.error(\"Export transactions by date JSON error:\", error);\n        res.status(500).json({ error: \"Tarihli işlemler JSON'a aktarılırken hata oluştu\" });\n      }\n    }\n  );\n\n  app.post(\"/api/transactions/export-category-analysis\",\n    requireAuth,\n    requirePermission(Permission.VIEW_ALL_TRANSACTIONS),\n    logAccess(\"EXPORT_CATEGORY_ANALYSIS_JSON\"),\n    async (req: AuthenticatedRequest, res) => {\n      try {\n        const result = await transactionJsonService.exportCategoryAnalysisToJson();\n        \n        if (result.success) {\n          res.json({\n            message: result.message,\n            filePath: result.filePath,\n            success: true\n          });\n        } else {\n          res.status(400).json({\n            error: result.message,\n            success: false\n          });\n        }\n      } catch (error) {\n        console.error(\"Export category analysis JSON error:\", error);\n        res.status(500).json({ error: \"Kategori analizi JSON'a aktarılırken hata oluştu\" });\n      }\n    }\n  );\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n","size_bytes":58967},"server/storage.ts":{"content":"import { type Account, type InsertAccount, type Transaction, type InsertTransaction, type User, type InsertUser, type Team, type InsertTeam, type TeamMember, type InsertTeamMember, type Invite, type InsertInvite, type SystemAlert, type InsertSystemAlert, accounts, transactions, users, teams, teamMembers, invites, systemAlerts } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport type { UserRoleType } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User authentication methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateUserPassword(id: string, hashedPassword: string): Promise<User | undefined>;\n  setResetToken(email: string, token: string, expires: Date): Promise<User | undefined>;\n  verifyEmail(id: string): Promise<User | undefined>;\n  updateLastLogin(id: string): Promise<User | undefined>;\n\n  // Admin user management methods\n  getAllUsers(): Promise<User[]>;\n  updateUserRole(id: string, role: UserRoleType): Promise<User | undefined>;\n  updateUserStatus(id: string, isActive: boolean): Promise<User | undefined>;\n  \n  // Account methods\n  getAccounts(): Promise<Account[]>;\n  getAccount(id: string): Promise<Account | undefined>;\n  createAccount(account: InsertAccount): Promise<Account>;\n  updateAccountBalance(id: string, balance: number): Promise<Account | undefined>;\n  adjustAccountBalance(id: string, amount: number): Promise<Account | undefined>;\n  \n  // Transaction methods\n  getTransactions(): Promise<Transaction[]>;\n  getTransactionsByAccount(accountId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  performTransaction(transactionData: InsertTransaction, balanceAdjustment: number): Promise<Transaction>;\n  performTransfer(fromAccountId: string, toAccountId: string, amount: number, description: string, virmanPairId: string): Promise<{ outTransaction: Transaction; inTransaction: Transaction }>;\n  \n  // Dashboard methods\n  getDashboardStats(): Promise<{\n    totalBalance: number;\n    companyBalance: number;\n    personalBalance: number;\n    totalCash: number;\n    totalDebt: number;\n    totalTransactions: number;\n    recentTransactions: Transaction[];\n    accounts: Account[];\n  }>;\n  \n  // Team Management methods\n  createTeam(team: InsertTeam): Promise<Team>;\n  getTeam(id: string): Promise<Team | undefined>;\n  getTeamsByUserId(userId: string): Promise<Team[]>;\n  updateTeam(id: string, updates: Partial<Team>): Promise<Team | undefined>;\n  deleteTeam(id: string): Promise<boolean>;\n  \n  // Team Member methods\n  addTeamMember(member: InsertTeamMember): Promise<TeamMember>;\n  getTeamMembers(teamId: string): Promise<TeamMember[]>;\n  getTeamMember(teamId: string, userId: string): Promise<TeamMember | undefined>;\n  updateTeamMember(id: string, updates: Partial<TeamMember>): Promise<TeamMember | undefined>;\n  removeTeamMember(teamId: string, userId: string): Promise<boolean>;\n  getUserTeamRole(teamId: string, userId: string): Promise<string | undefined>;\n  \n  // Invite methods\n  createInvite(invite: InsertInvite): Promise<Invite>;\n  getInvite(id: string): Promise<Invite | undefined>;\n  getInviteByToken(token: string): Promise<Invite | undefined>;\n  getTeamInvites(teamId: string): Promise<Invite[]>;\n  getPendingInvitesByEmail(email: string): Promise<Invite[]>;\n  updateInviteStatus(id: string, status: 'pending' | 'accepted' | 'declined' | 'expired', userId?: string): Promise<Invite | undefined>;\n  deleteInvite(id: string): Promise<boolean>;\n  \n  // System Alert methods\n  createSystemAlert(alert: InsertSystemAlert): Promise<SystemAlert>;\n  getSystemAlerts(): Promise<SystemAlert[]>;\n  getActiveSystemAlerts(): Promise<SystemAlert[]>;\n  getSystemAlertsByType(type: string): Promise<SystemAlert[]>;\n  getSystemAlert(id: string): Promise<SystemAlert | undefined>;\n  dismissSystemAlert(id: string): Promise<SystemAlert | undefined>;\n  updateSystemAlert(id: string, updates: Partial<SystemAlert>): Promise<SystemAlert | undefined>;\n  deleteSystemAlert(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private accounts: Map<string, Account>;\n  private transactions: Map<string, Transaction>;\n  private teams: Map<string, Team>;\n  private teamMembers: Map<string, TeamMember>;\n  private invites: Map<string, Invite>;\n\n  constructor() {\n    this.users = new Map();\n    this.accounts = new Map();\n    this.transactions = new Map();\n    this.teams = new Map();\n    this.teamMembers = new Map();\n    this.invites = new Map();\n    \n    // Initialize with demo data\n    this.initializeDemoData();\n  }\n\n  private initializeDemoData() {\n    // Seed admin user in development only (if no users exist)\n    if (process.env.NODE_ENV === 'development' && this.users.size === 0) {\n      const bcrypt = require('bcryptjs');\n      const adminId = randomUUID();\n      const now = new Date();\n      // Generate secure random password for development\n      const devPassword = Math.random().toString(36).slice(-12) + Math.random().toString(36).slice(-12);\n      const hashedPassword = bcrypt.hashSync(devPassword, 12);\n      console.log(`[DEV] Admin user created - Email: admin@finbot.com, Password: ${devPassword}`);\n      \n      const adminUser: User = {\n        id: adminId,\n        username: \"admin\",\n        email: \"admin@finbot.com\", \n        password: hashedPassword,\n        role: \"admin\",\n        emailVerified: now,\n        resetToken: null,\n        resetTokenExpires: null,\n        isActive: true,\n        createdAt: now,\n        lastLogin: null\n      };\n      this.users.set(adminId, adminUser);\n    }\n\n    const account1: Account = {\n      id: '1',\n      type: 'company',\n      bankName: 'Yapı Kredi',\n      accountName: 'Demo Şirket Hesabı',\n      balance: '50000.0000',\n      currency: 'TRY'\n    };\n    \n    const account2: Account = {\n      id: '2',\n      type: 'personal',\n      bankName: 'Garanti',\n      accountName: 'Demo Kişisel Hesap',\n      balance: '15000.0000',\n      currency: 'TRY'\n    };\n    \n    this.accounts.set('1', account1);\n    this.accounts.set('2', account2);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      emailVerified: null,\n      resetToken: null,\n      resetTokenExpires: null,\n      role: \"personal_user\",\n      isActive: true,\n      createdAt: now,\n      lastLogin: null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (user) {\n      const updatedUser = { ...user, ...updates };\n      this.users.set(id, updatedUser);\n      return updatedUser;\n    }\n    return undefined;\n  }\n\n  async updateUserPassword(id: string, hashedPassword: string): Promise<User | undefined> {\n    return this.updateUser(id, { password: hashedPassword });\n  }\n\n  async setResetToken(email: string, token: string, expires: Date): Promise<User | undefined> {\n    const user = await this.getUserByEmail(email);\n    if (user) {\n      return this.updateUser(user.id, { resetToken: token, resetTokenExpires: expires });\n    }\n    return undefined;\n  }\n\n  async verifyEmail(id: string): Promise<User | undefined> {\n    return this.updateUser(id, { emailVerified: new Date() });\n  }\n\n  async updateLastLogin(id: string): Promise<User | undefined> {\n    return this.updateUser(id, { lastLogin: new Date() });\n  }\n\n  // Admin user management methods\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async updateUserRole(id: string, role: UserRoleType): Promise<User | undefined> {\n    return this.updateUser(id, { role });\n  }\n\n  async updateUserStatus(id: string, isActive: boolean): Promise<User | undefined> {\n    return this.updateUser(id, { isActive });\n  }\n\n  async getAccounts(): Promise<Account[]> {\n    return Array.from(this.accounts.values());\n  }\n\n  async getAccount(id: string): Promise<Account | undefined> {\n    return this.accounts.get(id);\n  }\n\n  async createAccount(insertAccount: InsertAccount): Promise<Account> {\n    const id = randomUUID();\n    const account: Account = { \n      ...insertAccount, \n      id,\n      balance: insertAccount.balance || '0.0000',\n      currency: insertAccount.currency || 'TRY'\n    };\n    this.accounts.set(id, account);\n    return account;\n  }\n\n  async updateAccountBalance(id: string, balance: number): Promise<Account | undefined> {\n    const account = this.accounts.get(id);\n    if (account) {\n      account.balance = balance.toFixed(4);\n      this.accounts.set(id, account);\n      return account;\n    }\n    return undefined;\n  }\n\n  async getTransactions(): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).sort((a, b) => \n      new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n  }\n\n  async getTransactionsByAccount(accountId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(t => t.accountId === accountId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const transaction: Transaction = { \n      ...insertTransaction, \n      id,\n      date: new Date(),\n      category: insertTransaction.category || null,\n      virmanPairId: insertTransaction.virmanPairId || null\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async adjustAccountBalance(id: string, amount: number): Promise<Account | undefined> {\n    const account = this.accounts.get(id);\n    if (account) {\n      const currentBalance = parseFloat(account.balance);\n      account.balance = (currentBalance + amount).toFixed(4);\n      this.accounts.set(id, account);\n      return account;\n    }\n    return undefined;\n  }\n\n  async performTransaction(transactionData: InsertTransaction, balanceAdjustment: number): Promise<Transaction> {\n    const transaction = await this.createTransaction(transactionData);\n    await this.adjustAccountBalance(transactionData.accountId, balanceAdjustment);\n    return transaction;\n  }\n\n  async performTransfer(fromAccountId: string, toAccountId: string, amount: number, description: string, virmanPairId: string): Promise<{ outTransaction: Transaction; inTransaction: Transaction }> {\n    const fromAccount = this.accounts.get(fromAccountId);\n    if (!fromAccount || parseFloat(fromAccount.balance) < amount) {\n      throw new Error('Yetersiz bakiye');\n    }\n\n    const outTransaction = await this.createTransaction({\n      accountId: fromAccountId,\n      type: 'transfer_out',\n      amount: amount.toFixed(4),\n      description: `Virman: ${description}`,\n      virmanPairId\n    });\n\n    const inTransaction = await this.createTransaction({\n      accountId: toAccountId,\n      type: 'transfer_in',\n      amount: amount.toFixed(4),\n      description: `Virman: ${description}`,\n      virmanPairId\n    });\n\n    await this.adjustAccountBalance(fromAccountId, -amount);\n    await this.adjustAccountBalance(toAccountId, amount);\n\n    return { outTransaction, inTransaction };\n  }\n\n  async getDashboardStats() {\n    const accounts = await this.getAccounts();\n    const transactions = await this.getTransactions();\n    \n    const totalBalance = accounts.reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    const companyBalance = accounts.filter(a => a.type === 'company').reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    const personalBalance = accounts.filter(a => a.type === 'personal').reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    \n    // KPI Calculations\n    const totalCash = accounts\n      .filter(acc => parseFloat(acc.balance) > 0)\n      .reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    \n    const totalDebt = accounts\n      .filter(acc => parseFloat(acc.balance) < 0)\n      .reduce((sum, acc) => sum + Math.abs(parseFloat(acc.balance)), 0);\n    \n    const recentTransactions = transactions.slice(0, 10);\n    \n    return {\n      totalBalance,\n      companyBalance,\n      personalBalance,\n      totalCash,\n      totalDebt,\n      totalTransactions: transactions.length,\n      recentTransactions,\n      accounts\n    };\n  }\n\n  // Team Management methods\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const id = randomUUID();\n    const now = new Date();\n    const team: Team = { \n      ...insertTeam, \n      id,\n      description: insertTeam.description || null,\n      isActive: true,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.teams.set(id, team);\n    return team;\n  }\n\n  async getTeam(id: string): Promise<Team | undefined> {\n    return this.teams.get(id);\n  }\n\n  async getTeamsByUserId(userId: string): Promise<Team[]> {\n    const userTeamMembers = Array.from(this.teamMembers.values()).filter(\n      member => member.userId === userId && member.isActive\n    );\n    const teamIds = userTeamMembers.map(member => member.teamId);\n    return Array.from(this.teams.values()).filter(team => \n      teamIds.includes(team.id) && team.isActive\n    );\n  }\n\n  async updateTeam(id: string, updates: Partial<Team>): Promise<Team | undefined> {\n    const team = this.teams.get(id);\n    if (team) {\n      const updatedTeam = { ...team, ...updates, updatedAt: new Date() };\n      this.teams.set(id, updatedTeam);\n      return updatedTeam;\n    }\n    return undefined;\n  }\n\n  async deleteTeam(id: string): Promise<boolean> {\n    return this.teams.delete(id);\n  }\n\n  // Team Member methods\n  async addTeamMember(insertMember: InsertTeamMember): Promise<TeamMember> {\n    const id = randomUUID();\n    const member: TeamMember = { \n      ...insertMember, \n      id,\n      teamRole: insertMember.teamRole || 'member',\n      permissions: insertMember.permissions || null,\n      joinedAt: new Date(),\n      isActive: insertMember.isActive ?? true\n    };\n    this.teamMembers.set(id, member);\n    return member;\n  }\n\n  async getTeamMembers(teamId: string): Promise<TeamMember[]> {\n    return Array.from(this.teamMembers.values()).filter(\n      member => member.teamId === teamId && member.isActive\n    );\n  }\n\n  async getTeamMember(teamId: string, userId: string): Promise<TeamMember | undefined> {\n    return Array.from(this.teamMembers.values()).find(\n      member => member.teamId === teamId && member.userId === userId && member.isActive\n    );\n  }\n\n  async updateTeamMember(id: string, updates: Partial<TeamMember>): Promise<TeamMember | undefined> {\n    const member = this.teamMembers.get(id);\n    if (member) {\n      const updatedMember = { ...member, ...updates };\n      this.teamMembers.set(id, updatedMember);\n      return updatedMember;\n    }\n    return undefined;\n  }\n\n  async removeTeamMember(teamId: string, userId: string): Promise<boolean> {\n    // STORAGE GUARDRAIL: Cannot remove team owner at storage level\n    const team = await this.getTeam(teamId);\n    if (team && team.ownerId === userId) {\n      throw new Error(\"Cannot remove team owner - use transfer ownership first\");\n    }\n    \n    const member = await this.getTeamMember(teamId, userId);\n    if (member) {\n      return this.teamMembers.delete(member.id);\n    }\n    return false;\n  }\n\n  async getUserTeamRole(teamId: string, userId: string): Promise<string | undefined> {\n    const member = await this.getTeamMember(teamId, userId);\n    return member?.teamRole;\n  }\n\n  // Invite methods\n  async createInvite(insertInvite: InsertInvite): Promise<Invite> {\n    const id = randomUUID();\n    const invite: Invite = { \n      ...insertInvite, \n      id,\n      status: insertInvite.status || 'pending',\n      teamRole: insertInvite.teamRole || 'member',\n      invitedUserId: insertInvite.invitedUserId || null,\n      createdAt: new Date(),\n      acceptedAt: null\n    };\n    this.invites.set(id, invite);\n    return invite;\n  }\n\n  async getInvite(id: string): Promise<Invite | undefined> {\n    return this.invites.get(id);\n  }\n\n  async getInviteByToken(token: string): Promise<Invite | undefined> {\n    return Array.from(this.invites.values()).find(\n      invite => invite.inviteToken === token\n    );\n  }\n\n  async getTeamInvites(teamId: string): Promise<Invite[]> {\n    return Array.from(this.invites.values()).filter(\n      invite => invite.teamId === teamId\n    );\n  }\n\n  async getPendingInvitesByEmail(email: string): Promise<Invite[]> {\n    return Array.from(this.invites.values()).filter(\n      invite => invite.invitedEmail === email && invite.status === 'pending'\n    );\n  }\n\n  async updateInviteStatus(id: string, status: 'pending' | 'accepted' | 'declined' | 'expired', userId?: string): Promise<Invite | undefined> {\n    const invite = this.invites.get(id);\n    if (invite) {\n      const updates: Partial<Invite> = { status };\n      if (status === 'accepted') {\n        updates.acceptedAt = new Date();\n        if (userId) updates.invitedUserId = userId;\n      }\n      const updatedInvite = { ...invite, ...updates };\n      this.invites.set(id, updatedInvite);\n      return updatedInvite;\n    }\n    return undefined;\n  }\n\n  async deleteInvite(id: string): Promise<boolean> {\n    return this.invites.delete(id);\n  }\n\n  // System Alert methods implementation for MemStorage\n  private systemAlerts: Map<string, SystemAlert> = new Map();\n\n  async createSystemAlert(alertData: InsertSystemAlert): Promise<SystemAlert> {\n    const alert: SystemAlert = {\n      id: randomUUID(),\n      type: alertData.type,\n      title: alertData.title,\n      description: alertData.description,\n      severity: alertData.severity || 'medium',\n      triggerDate: alertData.triggerDate || null,\n      isActive: alertData.isActive !== undefined ? alertData.isActive : true,\n      isDismissed: alertData.isDismissed !== undefined ? alertData.isDismissed : false,\n      accountId: alertData.accountId || null,\n      transactionId: alertData.transactionId || null,\n      metadata: alertData.metadata || null,\n      createdAt: new Date(),\n      dismissedAt: null,\n    };\n    this.systemAlerts.set(alert.id, alert);\n    return alert;\n  }\n\n  async getSystemAlerts(): Promise<SystemAlert[]> {\n    return Array.from(this.systemAlerts.values());\n  }\n\n  async getActiveSystemAlerts(): Promise<SystemAlert[]> {\n    return Array.from(this.systemAlerts.values()).filter(\n      alert => alert.isActive && !alert.isDismissed\n    );\n  }\n\n  async getSystemAlertsByType(type: string): Promise<SystemAlert[]> {\n    return Array.from(this.systemAlerts.values()).filter(\n      alert => alert.type === type\n    );\n  }\n\n  async getSystemAlert(id: string): Promise<SystemAlert | undefined> {\n    return this.systemAlerts.get(id);\n  }\n\n  async dismissSystemAlert(id: string): Promise<SystemAlert | undefined> {\n    const alert = this.systemAlerts.get(id);\n    if (alert) {\n      const updatedAlert = { \n        ...alert, \n        isDismissed: true, \n        dismissedAt: new Date()\n      };\n      this.systemAlerts.set(id, updatedAlert);\n      return updatedAlert;\n    }\n    return undefined;\n  }\n\n  async updateSystemAlert(id: string, updates: Partial<SystemAlert>): Promise<SystemAlert | undefined> {\n    const alert = this.systemAlerts.get(id);\n    if (alert) {\n      const updatedAlert = { ...alert, ...updates };\n      this.systemAlerts.set(id, updatedAlert);\n      return updatedAlert;\n    }\n    return undefined;\n  }\n\n  async deleteSystemAlert(id: string): Promise<boolean> {\n    return this.systemAlerts.delete(id);\n  }\n}\n\nexport class PostgresStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserPassword(id: string, hashedPassword: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ password: hashedPassword })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async setResetToken(email: string, token: string, expires: Date): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ resetToken: token, resetTokenExpires: expires })\n      .where(eq(users.email, email))\n      .returning();\n    return result[0];\n  }\n\n  async verifyEmail(id: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ emailVerified: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateLastLogin(id: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ lastLogin: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Admin user management methods\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUserRole(id: string, role: UserRoleType): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ role })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserStatus(id: string, isActive: boolean): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ isActive })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Account methods\n  async getAccounts(): Promise<Account[]> {\n    return await db.select().from(accounts);\n  }\n\n  async getAccount(id: string): Promise<Account | undefined> {\n    const result = await db.select().from(accounts).where(eq(accounts.id, id));\n    return result[0];\n  }\n\n  async createAccount(insertAccount: InsertAccount): Promise<Account> {\n    const result = await db.insert(accounts).values(insertAccount).returning();\n    return result[0];\n  }\n\n  async updateAccountBalance(id: string, balance: number): Promise<Account | undefined> {\n    const result = await db.update(accounts)\n      .set({ balance: balance.toFixed(4) })\n      .where(eq(accounts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async adjustAccountBalance(id: string, amount: number): Promise<Account | undefined> {\n    const result = await db.update(accounts)\n      .set({ balance: sql`${accounts.balance}::numeric + ${amount.toFixed(4)}::numeric` })\n      .where(eq(accounts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async performTransaction(transactionData: InsertTransaction, balanceAdjustment: number): Promise<Transaction> {\n    return await db.transaction(async (tx) => {\n      // Create the transaction record\n      const transactionResult = await tx.insert(transactions).values(transactionData).returning();\n      \n      // Atomically adjust the account balance\n      await tx.update(accounts)\n        .set({ balance: sql`${accounts.balance}::numeric + ${balanceAdjustment.toFixed(4)}::numeric` })\n        .where(eq(accounts.id, transactionData.accountId));\n        \n      return transactionResult[0];\n    });\n  }\n\n  async performTransfer(fromAccountId: string, toAccountId: string, amount: number, description: string, virmanPairId: string): Promise<{ outTransaction: Transaction; inTransaction: Transaction }> {\n    return await db.transaction(async (tx) => {\n      // Atomically debit the source account with conditional check\n      const debitResult = await tx.update(accounts)\n        .set({ balance: sql`${accounts.balance}::numeric - ${amount.toFixed(4)}::numeric` })\n        .where(sql`${accounts.id} = ${fromAccountId} AND ${accounts.balance}::numeric >= ${amount.toFixed(4)}::numeric`)\n        .returning();\n      \n      if (debitResult.length === 0) {\n        throw new Error('Yetersiz bakiye');\n      }\n      \n      // Credit the destination account\n      await tx.update(accounts)\n        .set({ balance: sql`${accounts.balance}::numeric + ${amount.toFixed(4)}::numeric` })\n        .where(eq(accounts.id, toAccountId));\n      \n      // Create transaction records after successful balance updates\n      const outTransactionResult = await tx.insert(transactions).values({\n        accountId: fromAccountId,\n        type: 'transfer_out',\n        amount: amount.toFixed(4),\n        description: `Virman: ${description}`,\n        virmanPairId\n      }).returning();\n      \n      const inTransactionResult = await tx.insert(transactions).values({\n        accountId: toAccountId,\n        type: 'transfer_in',\n        amount: amount.toFixed(4),\n        description: `Virman: ${description}`,\n        virmanPairId\n      }).returning();\n        \n      return { outTransaction: outTransactionResult[0], inTransaction: inTransactionResult[0] };\n    });\n  }\n\n  // Transaction methods\n  async getTransactions(): Promise<Transaction[]> {\n    return await db.select().from(transactions).orderBy(desc(transactions.date));\n  }\n\n  async getTransactionsByAccount(accountId: string): Promise<Transaction[]> {\n    return await db.select().from(transactions)\n      .where(eq(transactions.accountId, accountId))\n      .orderBy(desc(transactions.date));\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const result = await db.insert(transactions).values(insertTransaction).returning();\n    return result[0];\n  }\n\n  async getDashboardStats() {\n    const accounts = await this.getAccounts();\n    const transactions = await this.getTransactions();\n    \n    const totalBalance = accounts.reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    const companyBalance = accounts.filter(a => a.type === 'company').reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    const personalBalance = accounts.filter(a => a.type === 'personal').reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    \n    // KPI Calculations\n    const totalCash = accounts\n      .filter(acc => parseFloat(acc.balance) > 0)\n      .reduce((sum, acc) => sum + parseFloat(acc.balance), 0);\n    \n    const totalDebt = accounts\n      .filter(acc => parseFloat(acc.balance) < 0)\n      .reduce((sum, acc) => sum + Math.abs(parseFloat(acc.balance)), 0);\n    \n    const recentTransactions = transactions.slice(0, 10);\n    \n    return {\n      totalBalance,\n      companyBalance,\n      personalBalance,\n      totalCash,\n      totalDebt,\n      totalTransactions: transactions.length,\n      recentTransactions,\n      accounts\n    };\n  }\n\n  // Team Management methods\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const result = await db.insert(teams).values(insertTeam).returning();\n    return result[0];\n  }\n\n  async getTeam(id: string): Promise<Team | undefined> {\n    const result = await db.select().from(teams).where(eq(teams.id, id));\n    return result[0];\n  }\n\n  async getTeamsByUserId(userId: string): Promise<Team[]> {\n    const result = await db.select({\n      id: teams.id,\n      name: teams.name,\n      description: teams.description,\n      ownerId: teams.ownerId,\n      isActive: teams.isActive,\n      createdAt: teams.createdAt,\n      updatedAt: teams.updatedAt,\n    })\n    .from(teams)\n    .innerJoin(teamMembers, eq(teams.id, teamMembers.teamId))\n    .where(sql`${teamMembers.userId} = ${userId} AND ${teamMembers.isActive} = true AND ${teams.isActive} = true`);\n    \n    return result;\n  }\n\n  async updateTeam(id: string, updates: Partial<Team>): Promise<Team | undefined> {\n    const result = await db.update(teams)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(teams.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTeam(id: string): Promise<boolean> {\n    const result = await db.delete(teams).where(eq(teams.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Team Member methods\n  async addTeamMember(insertMember: InsertTeamMember): Promise<TeamMember> {\n    const result = await db.insert(teamMembers).values(insertMember).returning();\n    return result[0];\n  }\n\n  async getTeamMembers(teamId: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers)\n      .where(sql`${teamMembers.teamId} = ${teamId} AND ${teamMembers.isActive} = true`);\n  }\n\n  async getTeamMember(teamId: string, userId: string): Promise<TeamMember | undefined> {\n    const result = await db.select().from(teamMembers)\n      .where(sql`${teamMembers.teamId} = ${teamId} AND ${teamMembers.userId} = ${userId} AND ${teamMembers.isActive} = true`);\n    return result[0];\n  }\n\n  async updateTeamMember(id: string, updates: Partial<TeamMember>): Promise<TeamMember | undefined> {\n    const result = await db.update(teamMembers)\n      .set(updates)\n      .where(eq(teamMembers.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async removeTeamMember(teamId: string, userId: string): Promise<boolean> {\n    // STORAGE GUARDRAIL: Cannot remove team owner at storage level\n    const team = await this.getTeam(teamId);\n    if (team && team.ownerId === userId) {\n      throw new Error(\"Cannot remove team owner - use transfer ownership first\");\n    }\n    \n    const result = await db.delete(teamMembers)\n      .where(sql`${teamMembers.teamId} = ${teamId} AND ${teamMembers.userId} = ${userId}`)\n      .returning();\n    return result.length > 0;\n  }\n\n  async getUserTeamRole(teamId: string, userId: string): Promise<string | undefined> {\n    const member = await this.getTeamMember(teamId, userId);\n    return member?.teamRole;\n  }\n\n  // Invite methods\n  async createInvite(insertInvite: InsertInvite): Promise<Invite> {\n    const result = await db.insert(invites).values(insertInvite).returning();\n    return result[0];\n  }\n\n  async getInvite(id: string): Promise<Invite | undefined> {\n    const result = await db.select().from(invites).where(eq(invites.id, id));\n    return result[0];\n  }\n\n  async getInviteByToken(token: string): Promise<Invite | undefined> {\n    const result = await db.select().from(invites).where(eq(invites.inviteToken, token));\n    return result[0];\n  }\n\n  async getTeamInvites(teamId: string): Promise<Invite[]> {\n    return await db.select().from(invites).where(eq(invites.teamId, teamId));\n  }\n\n  async getPendingInvitesByEmail(email: string): Promise<Invite[]> {\n    return await db.select().from(invites)\n      .where(sql`${invites.invitedEmail} = ${email} AND ${invites.status} = 'pending'`);\n  }\n\n  async updateInviteStatus(id: string, status: 'pending' | 'accepted' | 'declined' | 'expired', userId?: string): Promise<Invite | undefined> {\n    const updates: Partial<Invite> = { status };\n    if (status === 'accepted') {\n      updates.acceptedAt = new Date();\n      if (userId) updates.invitedUserId = userId;\n    }\n    const result = await db.update(invites)\n      .set(updates)\n      .where(eq(invites.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteInvite(id: string): Promise<boolean> {\n    const result = await db.delete(invites).where(eq(invites.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // System Alert methods implementation for PostgresStorage\n  async createSystemAlert(alertData: InsertSystemAlert): Promise<SystemAlert> {\n    const result = await db.insert(systemAlerts).values(alertData).returning();\n    return result[0];\n  }\n\n  async getSystemAlerts(): Promise<SystemAlert[]> {\n    return await db.select().from(systemAlerts).orderBy(desc(systemAlerts.createdAt));\n  }\n\n  async getActiveSystemAlerts(): Promise<SystemAlert[]> {\n    return await db.select().from(systemAlerts)\n      .where(sql`${systemAlerts.isActive} = true AND ${systemAlerts.isDismissed} = false`)\n      .orderBy(desc(systemAlerts.createdAt));\n  }\n\n  async getSystemAlertsByType(type: string): Promise<SystemAlert[]> {\n    return await db.select().from(systemAlerts)\n      .where(eq(systemAlerts.type, type))\n      .orderBy(desc(systemAlerts.createdAt));\n  }\n\n  async getSystemAlert(id: string): Promise<SystemAlert | undefined> {\n    const result = await db.select().from(systemAlerts).where(eq(systemAlerts.id, id));\n    return result[0];\n  }\n\n  async dismissSystemAlert(id: string): Promise<SystemAlert | undefined> {\n    const result = await db.update(systemAlerts)\n      .set({ \n        isDismissed: true, \n        dismissedAt: new Date()\n      })\n      .where(eq(systemAlerts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateSystemAlert(id: string, updates: Partial<SystemAlert>): Promise<SystemAlert | undefined> {\n    const result = await db.update(systemAlerts)\n      .set(updates)\n      .where(eq(systemAlerts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSystemAlert(id: string): Promise<boolean> {\n    const result = await db.delete(systemAlerts).where(eq(systemAlerts.id, id)).returning();\n    return result.length > 0;\n  }\n}\n\n// Use PostgreSQL storage in production, memory storage for development/testing\nexport const storage = process.env.NODE_ENV === 'test' ? new MemStorage() : new PostgresStorage();\n","size_bytes":34180},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const accounts = pgTable(\"accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\", { length: 20 }).notNull(), // 'personal' or 'company'\n  bankName: varchar(\"bank_name\", { length: 100 }).notNull(),\n  accountName: varchar(\"account_name\", { length: 255 }).notNull(),\n  balance: decimal(\"balance\", { precision: 19, scale: 4 }).default(\"0\").notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default(\"TRY\").notNull(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: varchar(\"account_id\").notNull(),\n  type: varchar(\"type\", { length: 20 }).notNull(), // 'income', 'expense', 'transfer_in', 'transfer_out'\n  amount: decimal(\"amount\", { precision: 19, scale: 4 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { length: 50 }),\n  virmanPairId: varchar(\"virman_pair_id\"), // for linking transfer transactions\n  date: timestamp(\"date\").default(sql`NOW()`).notNull(),\n});\n\n// System alerts table for important dates and notifications\nexport const systemAlerts = pgTable(\"system_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'low_balance', 'recurring_payment', 'budget_exceeded', 'payment_due'\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  severity: varchar(\"severity\", { length: 20 }).default(\"medium\").notNull(), // 'low', 'medium', 'high', 'critical'\n  triggerDate: timestamp(\"trigger_date\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  isDismissed: boolean(\"is_dismissed\").default(false).notNull(),\n  accountId: varchar(\"account_id\"), // Optional - for account-specific alerts\n  transactionId: varchar(\"transaction_id\"), // Optional - for transaction-specific alerts\n  metadata: text(\"metadata\"), // JSON string for additional data\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n  dismissedAt: timestamp(\"dismissed_at\"),\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  date: true,\n});\n\nexport const insertSystemAlertSchema = createInsertSchema(systemAlerts).omit({\n  id: true,\n  createdAt: true,\n  dismissedAt: true,\n});\n\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertSystemAlert = z.infer<typeof insertSystemAlertSchema>;\nexport type SystemAlert = typeof systemAlerts.$inferSelect;\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  emailVerified: timestamp(\"email_verified\"),\n  resetToken: text(\"reset_token\"),\n  resetTokenExpires: timestamp(\"reset_token_expires\"),\n  role: varchar(\"role\", { length: 20 }).default(\"personal_user\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n  lastLogin: timestamp(\"last_login\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Geçerli bir email adresi giriniz\"),\n  password: z.string().min(6, \"Şifre en az 6 karakter olmalıdır\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  email: z.string().email(\"Geçerli bir email adresi giriniz\"),\n  password: z.string().min(6, \"Şifre en az 6 karakter olmalıdır\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Şifreler eşleşmiyor\",\n  path: [\"confirmPassword\"],\n});\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(\"Geçerli bir email adresi giriniz\"),\n});\n\nexport const resetPasswordSchema = z.object({\n  token: z.string(),\n  password: z.string().min(6, \"Şifre en az 6 karakter olmalıdır\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Şifreler eşleşmiyor\",\n  path: [\"confirmPassword\"],\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type RegisterRequest = z.infer<typeof registerSchema>;\nexport type ForgotPasswordRequest = z.infer<typeof forgotPasswordSchema>;\nexport type ResetPasswordRequest = z.infer<typeof resetPasswordSchema>;\n\n// Admin route validation schemas\nexport const updateUserRoleSchema = z.object({\n  role: z.enum([\"admin\", \"company_user\", \"personal_user\"]),\n});\n\nexport const updateUserStatusSchema = z.object({\n  isActive: z.boolean(),\n});\n\nexport type UpdateUserRoleRequest = z.infer<typeof updateUserRoleSchema>;\nexport type UpdateUserStatusRequest = z.infer<typeof updateUserStatusSchema>;\n\n// Predefined transaction categories\nexport const transactionCategories = {\n  income: [\n    { value: 'salary', label: 'Maaş' },\n    { value: 'freelance', label: 'Serbest Çalışma' },\n    { value: 'investment', label: 'Yatırım Geliri' },\n    { value: 'rental', label: 'Kira Geliri' },\n    { value: 'bonus', label: 'Bonus' },\n    { value: 'other_income', label: 'Diğer Gelirler' }\n  ],\n  expense: [\n    { value: 'food', label: 'Yiyecek & İçecek' },\n    { value: 'transportation', label: 'Ulaşım' },\n    { value: 'utilities', label: 'Faturalar' },\n    { value: 'rent', label: 'Kira' },\n    { value: 'shopping', label: 'Alışveriş' },\n    { value: 'healthcare', label: 'Sağlık' },\n    { value: 'entertainment', label: 'Eğlence' },\n    { value: 'education', label: 'Eğitim' },\n    { value: 'insurance', label: 'Sigorta' },\n    { value: 'savings', label: 'Tasarruf' },\n    { value: 'other_expense', label: 'Diğer Giderler' }\n  ]\n};\n\nexport const getAllCategories = () => [\n  ...transactionCategories.income,\n  ...transactionCategories.expense\n];\n\nexport const getCategoryLabel = (categoryValue: string | null | undefined): string => {\n  if (!categoryValue) return 'Kategori Yok';\n  const allCategories = getAllCategories();\n  const category = allCategories.find(cat => cat.value === categoryValue);\n  return category?.label || categoryValue;\n};\n\n// RBAC System\nexport const UserRole = {\n  ADMIN: 'admin',\n  COMPANY_USER: 'company_user', \n  PERSONAL_USER: 'personal_user'\n} as const;\n\nexport type UserRoleType = typeof UserRole[keyof typeof UserRole];\n\nexport const Permission = {\n  // User Management\n  MANAGE_USERS: 'manage_users',\n  VIEW_USERS: 'view_users',\n  \n  // Account Management\n  MANAGE_ALL_ACCOUNTS: 'manage_all_accounts',\n  MANAGE_COMPANY_ACCOUNTS: 'manage_company_accounts',\n  MANAGE_PERSONAL_ACCOUNTS: 'manage_personal_accounts',\n  VIEW_ALL_ACCOUNTS: 'view_all_accounts',\n  VIEW_COMPANY_ACCOUNTS: 'view_company_accounts',\n  VIEW_PERSONAL_ACCOUNTS: 'view_personal_accounts',\n  \n  // Transaction Management\n  MANAGE_ALL_TRANSACTIONS: 'manage_all_transactions',\n  MANAGE_COMPANY_TRANSACTIONS: 'manage_company_transactions',\n  MANAGE_PERSONAL_TRANSACTIONS: 'manage_personal_transactions',\n  VIEW_ALL_TRANSACTIONS: 'view_all_transactions',\n  VIEW_COMPANY_TRANSACTIONS: 'view_company_transactions',\n  VIEW_PERSONAL_TRANSACTIONS: 'view_personal_transactions',\n  \n  // Reports & Analytics\n  VIEW_ALL_REPORTS: 'view_all_reports',\n  VIEW_COMPANY_REPORTS: 'view_company_reports',\n  VIEW_PERSONAL_REPORTS: 'view_personal_reports',\n  EXPORT_DATA: 'export_data',\n  \n  // System Settings\n  MANAGE_SETTINGS: 'manage_settings',\n  VIEW_SETTINGS: 'view_settings',\n  \n  // Credit & Cards\n  MANAGE_CREDIT: 'manage_credit',\n  VIEW_CREDIT: 'view_credit',\n} as const;\n\nexport type PermissionType = typeof Permission[keyof typeof Permission];\n\n// Role-Permission Mapping\nexport const rolePermissions: Record<UserRoleType, PermissionType[]> = {\n  [UserRole.ADMIN]: [\n    Permission.MANAGE_USERS,\n    Permission.VIEW_USERS,\n    Permission.MANAGE_ALL_ACCOUNTS,\n    Permission.VIEW_ALL_ACCOUNTS,\n    Permission.MANAGE_ALL_TRANSACTIONS,\n    Permission.VIEW_ALL_TRANSACTIONS,\n    Permission.VIEW_ALL_REPORTS,\n    Permission.EXPORT_DATA,\n    Permission.MANAGE_SETTINGS,\n    Permission.VIEW_SETTINGS,\n    Permission.MANAGE_CREDIT,\n    Permission.VIEW_CREDIT,\n  ],\n  [UserRole.COMPANY_USER]: [\n    Permission.MANAGE_COMPANY_ACCOUNTS,\n    Permission.VIEW_COMPANY_ACCOUNTS,\n    Permission.VIEW_PERSONAL_ACCOUNTS,\n    Permission.MANAGE_COMPANY_TRANSACTIONS,\n    Permission.VIEW_COMPANY_TRANSACTIONS,\n    Permission.VIEW_PERSONAL_TRANSACTIONS,\n    Permission.VIEW_COMPANY_REPORTS,\n    Permission.VIEW_PERSONAL_REPORTS,\n    Permission.EXPORT_DATA,\n    Permission.VIEW_SETTINGS,\n    Permission.MANAGE_CREDIT,\n    Permission.VIEW_CREDIT,\n  ],\n  [UserRole.PERSONAL_USER]: [\n    Permission.MANAGE_PERSONAL_ACCOUNTS,\n    Permission.VIEW_PERSONAL_ACCOUNTS,\n    Permission.MANAGE_PERSONAL_TRANSACTIONS,\n    Permission.VIEW_PERSONAL_TRANSACTIONS,\n    Permission.VIEW_PERSONAL_REPORTS,\n    Permission.VIEW_SETTINGS,\n    Permission.VIEW_CREDIT,\n  ],\n};\n\n// Helper functions for RBAC\nexport const hasPermission = (userRole: UserRoleType, permission: PermissionType): boolean => {\n  return rolePermissions[userRole]?.includes(permission) || false;\n};\n\nexport const hasAnyPermission = (userRole: UserRoleType, permissions: PermissionType[]): boolean => {\n  return permissions.some(permission => hasPermission(userRole, permission));\n};\n\nexport const canAccessAccountType = (userRole: UserRoleType, accountType: 'personal' | 'company'): boolean => {\n  if (userRole === UserRole.ADMIN) return true;\n  if (userRole === UserRole.COMPANY_USER) return true; // Can access both\n  if (userRole === UserRole.PERSONAL_USER) return accountType === 'personal';\n  return false;\n};\n\nexport const canManageAccountType = (userRole: UserRoleType, accountType: 'personal' | 'company'): boolean => {\n  if (userRole === UserRole.ADMIN) return true;\n  if (userRole === UserRole.COMPANY_USER && accountType === 'company') return true;\n  if (userRole === UserRole.PERSONAL_USER && accountType === 'personal') return true;\n  return false;\n};\n\n// =====================\n// MULTI-USER SYSTEM SCHEMA\n// =====================\n\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  ownerId: varchar(\"owner_id\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`).notNull(),\n});\n\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  teamRole: varchar(\"team_role\", { length: 20 }).default(\"member\").notNull(), // 'owner', 'admin', 'member', 'viewer'\n  permissions: text(\"permissions\").array(), // Custom permissions for team member\n  joinedAt: timestamp(\"joined_at\").default(sql`NOW()`).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const invites = pgTable(\"invites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull(),\n  inviterUserId: varchar(\"inviter_user_id\").notNull(),\n  invitedEmail: text(\"invited_email\").notNull(),\n  invitedUserId: varchar(\"invited_user_id\"), // null until user accepts\n  teamRole: varchar(\"team_role\", { length: 20 }).default(\"member\").notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\").notNull(), // 'pending', 'accepted', 'declined', 'expired'\n  inviteToken: text(\"invite_token\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n  acceptedAt: timestamp(\"accepted_at\"),\n});\n\n// Team Role Types\nexport const TeamRole = {\n  OWNER: 'owner',\n  ADMIN: 'admin', \n  MEMBER: 'member',\n  VIEWER: 'viewer'\n} as const;\n\nexport type TeamRoleType = typeof TeamRole[keyof typeof TeamRole];\n\n// Team Permission System\nexport const TeamPermission = {\n  // Team Management\n  MANAGE_TEAM: 'manage_team',\n  INVITE_MEMBERS: 'invite_members',\n  REMOVE_MEMBERS: 'remove_members',\n  MANAGE_ROLES: 'manage_roles',\n  \n  // Data Access\n  VIEW_ALL_DATA: 'view_all_data',\n  MANAGE_ALL_DATA: 'manage_all_data',\n  \n  // Financial Operations\n  CREATE_ACCOUNTS: 'create_accounts',\n  MANAGE_TRANSACTIONS: 'manage_transactions',\n  VIEW_REPORTS: 'view_reports',\n  EXPORT_DATA: 'export_data',\n} as const;\n\nexport type TeamPermissionType = typeof TeamPermission[keyof typeof TeamPermission];\n\n// Team Role-Permission Mapping\nexport const teamRolePermissions: Record<TeamRoleType, TeamPermissionType[]> = {\n  [TeamRole.OWNER]: [\n    TeamPermission.MANAGE_TEAM,\n    TeamPermission.INVITE_MEMBERS,\n    TeamPermission.REMOVE_MEMBERS,\n    TeamPermission.MANAGE_ROLES,\n    TeamPermission.VIEW_ALL_DATA,\n    TeamPermission.MANAGE_ALL_DATA,\n    TeamPermission.CREATE_ACCOUNTS,\n    TeamPermission.MANAGE_TRANSACTIONS,\n    TeamPermission.VIEW_REPORTS,\n    TeamPermission.EXPORT_DATA,\n  ],\n  [TeamRole.ADMIN]: [\n    TeamPermission.INVITE_MEMBERS,\n    TeamPermission.REMOVE_MEMBERS,\n    TeamPermission.VIEW_ALL_DATA,\n    TeamPermission.MANAGE_ALL_DATA,\n    TeamPermission.CREATE_ACCOUNTS,\n    TeamPermission.MANAGE_TRANSACTIONS,\n    TeamPermission.VIEW_REPORTS,\n    TeamPermission.EXPORT_DATA,\n  ],\n  [TeamRole.MEMBER]: [\n    TeamPermission.VIEW_ALL_DATA,\n    TeamPermission.MANAGE_TRANSACTIONS,\n    TeamPermission.VIEW_REPORTS,\n  ],\n  [TeamRole.VIEWER]: [\n    TeamPermission.VIEW_ALL_DATA,\n    TeamPermission.VIEW_REPORTS,\n  ],\n};\n\n// Schema Types and Validation\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateTeamSchema = insertTeamSchema.pick({\n  name: true,\n  description: true,\n}).partial();\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertInviteSchema = createInsertSchema(invites).omit({\n  id: true,\n  createdAt: true,\n  acceptedAt: true,\n});\n\nexport const inviteUserSchema = z.object({\n  teamId: z.string(),\n  email: z.string().email(\"Geçerli bir email adresi giriniz\"),\n  teamRole: z.enum(['owner', 'admin', 'member', 'viewer']).default('member'),\n});\n\nexport const acceptInviteSchema = z.object({\n  token: z.string(),\n  userId: z.string().optional(),\n});\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertInvite = z.infer<typeof insertInviteSchema>;\nexport type Invite = typeof invites.$inferSelect;\nexport type InviteUserRequest = z.infer<typeof inviteUserSchema>;\nexport type AcceptInviteRequest = z.infer<typeof acceptInviteSchema>;\n\n// Helper Functions for Team Management\nexport const hasTeamPermission = (teamRole: TeamRoleType, permission: TeamPermissionType): boolean => {\n  return teamRolePermissions[teamRole]?.includes(permission) || false;\n};\n\nexport const canManageTeamMember = (currentRole: TeamRoleType, targetRole: TeamRoleType): boolean => {\n  // Owner can manage everyone, Admin can manage Member/Viewer\n  if (currentRole === TeamRole.OWNER) return true;\n  if (currentRole === TeamRole.ADMIN && (targetRole === TeamRole.MEMBER || targetRole === TeamRole.VIEWER)) return true;\n  return false;\n};\n\n// =====================\n// TRANSACTION JSON API SCHEMAS\n// =====================\n\n// Schema for importing transactions from JSON\nexport const importTransactionJsonSchema = z.object({\n  overwriteExisting: z.boolean().default(false),\n});\n\n// Schema for exporting transactions by date range\nexport const exportTransactionsByDateSchema = z.object({\n  startDate: z.string().min(1, \"Başlangıç tarihi gereklidir\"),\n  endDate: z.string().min(1, \"Bitiş tarihi gereklidir\"),\n}).refine((data) => {\n  const start = new Date(data.startDate);\n  const end = new Date(data.endDate);\n  return !isNaN(start.getTime()) && !isNaN(end.getTime()) && start <= end;\n}, {\n  message: \"Geçerli tarih aralığı giriniz (başlangıç ≤ bitiş)\",\n});\n\n// Schema for transaction JSON file structure\nexport const transactionJsonFileSchema = z.object({\n  exportDate: z.string(),\n  totalTransactions: z.number().nonnegative(),\n  transactions: z.array(z.object({\n    id: z.string().min(1),\n    accountId: z.string().min(1),\n    type: z.enum(['income', 'expense', 'transfer_in', 'transfer_out']),\n    amount: z.string().min(1),\n    description: z.string().min(1),\n    category: z.string().nullable(),\n    virmanPairId: z.string().nullable(),\n    date: z.union([z.string(), z.date()]),\n    accountInfo: z.object({\n      bankName: z.string(),\n      accountName: z.string(),\n      type: z.enum(['personal', 'company']),\n    }).nullable().optional(),\n  })),\n  summary: z.object({\n    totalIncome: z.number().nonnegative(),\n    totalExpenses: z.number().nonnegative(),\n    totalTransfers: z.number().nonnegative(),\n  }).optional(),\n  dateRange: z.object({\n    start: z.string(),\n    end: z.string(),\n  }).optional(),\n});\n\nexport type ImportTransactionJson = z.infer<typeof importTransactionJsonSchema>;\nexport type ExportTransactionsByDate = z.infer<typeof exportTransactionsByDateSchema>;\nexport type TransactionJsonFile = z.infer<typeof transactionJsonFileSchema>;\n","size_bytes":18008},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarInset, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ThemeProvider } from \"@/lib/theme-context\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AuthProvider, AuthGuard, RouteGuard, useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogOut, User } from \"lucide-react\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport Analytics from \"@/pages/analytics\";\nimport Company from \"@/pages/company\";\nimport Personal from \"@/pages/personal\";\nimport Transfers from \"@/pages/transfers\";\nimport FixedExpenses from \"@/pages/fixed-expenses\";\nimport CreditCards from \"@/pages/credit-cards\";\nimport Reports from \"@/pages/reports\";\nimport Alerts from \"@/pages/alerts\";\nimport Settings from \"@/pages/settings\";\nimport Admin from \"@/pages/admin\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full\">\n      <div className=\"absolute top-4 right-4\">\n        <ThemeToggle />\n      </div>\n      {children}\n    </div>\n  );\n}\n\nfunction UserMenu() {\n  const { user, logout } = useAuth();\n  \n  return (\n    <div className=\"flex items-center gap-2\">\n      <div className=\"flex items-center gap-2 text-sm\">\n        <User className=\"h-4 w-4\" />\n        <span className=\"font-medium\">{user?.username}</span>\n        <span className=\"text-muted-foreground\">({user?.role})</span>\n      </div>\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={logout}\n        className=\"h-8 w-8 p-0\"\n        data-testid=\"button-logout\"\n      >\n        <LogOut className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <AuthGuard>\n      <SidebarProvider>\n        <AppSidebar />\n        <SidebarInset>\n          <header className=\"flex h-16 shrink-0 items-center gap-2 border-b px-4\">\n            <SidebarTrigger className=\"-ml-1\" />\n            <Separator orientation=\"vertical\" className=\"mr-2 h-4\" />\n            <div className=\"ml-auto flex items-center gap-4\">\n              <UserMenu />\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 space-y-4 p-6\">\n            {children}\n          </main>\n        </SidebarInset>\n      </SidebarProvider>\n    </AuthGuard>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Auth routes - no sidebar */}\n      <Route path=\"/login\">\n        <AuthLayout>\n          <Login />\n        </AuthLayout>\n      </Route>\n      <Route path=\"/register\">\n        <AuthLayout>\n          <Register />\n        </AuthLayout>\n      </Route>\n      \n      {/* App routes - with sidebar and role-based protection */}\n      <Route path=\"/\" nest>\n        <AppLayout>\n          <Switch>\n            <Route path=\"/\">\n              <RouteGuard route=\"/\">\n                <Dashboard />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/analytics\">\n              <RouteGuard route=\"/analytics\">\n                <Analytics />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/company\">\n              <RouteGuard route=\"/company\">\n                <Company />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/personal\">\n              <RouteGuard route=\"/personal\">\n                <Personal />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/transfers\">\n              <RouteGuard route=\"/transfers\">\n                <Transfers />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/fixed-expenses\">\n              <RouteGuard route=\"/fixed-expenses\">\n                <FixedExpenses />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/credit-cards\">\n              <RouteGuard route=\"/credit-cards\">\n                <CreditCards />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/reports\">\n              <RouteGuard route=\"/reports\">\n                <Reports />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/alerts\">\n              <RouteGuard route=\"/alerts\">\n                <Alerts />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/settings\">\n              <RouteGuard route=\"/settings\">\n                <Settings />\n              </RouteGuard>\n            </Route>\n            <Route path=\"/admin\">\n              <RouteGuard route=\"/admin\">\n                <Admin />\n              </RouteGuard>\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </AppLayout>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"system\" storageKey=\"finbot-ui-theme\">\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5525},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(210, 100%, 50%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(180, 25%, 25%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(210, 100%, 50%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":5598},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { registerServiceWorker } from \"./lib/pwa-utils\";\n\n// Register service worker\nregisterServiceWorker();\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":267},"client/src/components/account-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CreditCard, User, MoreHorizontal } from \"lucide-react\";\nimport type { Account } from \"@/lib/types\";\n\ninterface AccountCardProps {\n  account: Account;\n  formatCurrency: (amount: string) => string;\n}\n\nexport default function AccountCard({ account, formatCurrency }: AccountCardProps) {\n  const isCompany = account.type === 'company';\n  \n  return (\n    <Card className=\"shadow-sm\" data-testid={`card-account-${account.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center\">\n            <div className={`w-10 h-10 rounded-lg flex items-center justify-center mr-3 ${\n              isCompany ? 'bg-primary/10' : 'bg-secondary/10'\n            }`}>\n              {isCompany ? (\n                <CreditCard className={`w-5 h-5 ${isCompany ? 'text-primary' : 'text-secondary'}`} />\n              ) : (\n                <User className={`w-5 h-5 ${isCompany ? 'text-primary' : 'text-secondary'}`} />\n              )}\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium text-muted-foreground\" data-testid={`text-bank-name-${account.id}`}>\n                {account.bankName}\n              </h3>\n              <p className=\"text-xs text-muted-foreground\" data-testid={`text-account-type-${account.id}`}>\n                {isCompany ? 'Şirket Hesabı' : 'Kişisel Hesap'}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-account-menu-${account.id}`}>\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-muted-foreground mb-1\" data-testid={`text-account-name-${account.id}`}>\n            {account.accountName}\n          </p>\n          <p className=\"text-2xl font-bold text-foreground\" data-testid={`text-balance-${account.id}`}>\n            {formatCurrency(account.balance)}\n          </p>\n        </div>\n        <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n          <span data-testid={`text-currency-${account.id}`}>{account.currency}</span>\n          <span className=\"text-accent\" data-testid={`text-change-${account.id}`}>+2.5% bu ay</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2520},"client/src/components/add-account-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { User, Building } from \"lucide-react\";\n\ninterface AddAccountDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onAddAccount: (data: any) => void;\n  isLoading: boolean;\n}\n\nexport default function AddAccountDialog({ open, onOpenChange, onAddAccount, isLoading }: AddAccountDialogProps) {\n  const [accountType, setAccountType] = useState<'personal' | 'company'>('personal');\n  const [bankName, setBankName] = useState('');\n  const [accountName, setAccountName] = useState('');\n  const [balance, setBalance] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!bankName || !accountName) {\n      return;\n    }\n\n    onAddAccount({\n      type: accountType,\n      bankName,\n      accountName,\n      balance: balance || '0',\n      currency: 'TRY'\n    });\n\n    // Reset form\n    setBankName('');\n    setAccountName('');\n    setBalance('');\n    setAccountType('personal');\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\" data-testid=\"dialog-add-account\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"dialog-title\">Yeni Hesap Ekle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-foreground mb-2 block\">Hesap Türü</Label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                type=\"button\"\n                variant={accountType === 'personal' ? 'default' : 'outline'}\n                className=\"justify-start\"\n                onClick={() => setAccountType('personal')}\n                data-testid=\"button-account-type-personal\"\n              >\n                <User className=\"w-4 h-4 mr-2\" />\n                Kişisel\n              </Button>\n              <Button\n                type=\"button\"\n                variant={accountType === 'company' ? 'default' : 'outline'}\n                className=\"justify-start\"\n                onClick={() => setAccountType('company')}\n                data-testid=\"button-account-type-company\"\n              >\n                <Building className=\"w-4 h-4 mr-2\" />\n                Şirket\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"bankName\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Banka Adı\n            </Label>\n            <Input\n              id=\"bankName\"\n              placeholder=\"Örn: Yapı Kredi, Garanti, İş Bankası\"\n              value={bankName}\n              onChange={(e) => setBankName(e.target.value)}\n              required\n              data-testid=\"input-bank-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"accountName\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Hesap Adı\n            </Label>\n            <Input\n              id=\"accountName\"\n              placeholder=\"Hesap için açıklayıcı bir ad\"\n              value={accountName}\n              onChange={(e) => setAccountName(e.target.value)}\n              required\n              data-testid=\"input-account-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"balance\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Başlangıç Bakiyesi\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"balance\"\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={balance}\n                onChange={(e) => setBalance(e.target.value)}\n                className=\"pr-12\"\n                step=\"0.01\"\n                min=\"0\"\n                data-testid=\"input-balance\"\n              />\n              <span className=\"absolute right-3 top-2 text-sm text-muted-foreground\">TRY</span>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              İptal\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={isLoading || !bankName || !accountName}\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? 'Ekleniyor...' : 'Hesap Ekle'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4974},"client/src/components/transaction-form.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { transactionCategories } from \"@shared/schema\";\nimport type { Account } from \"@/lib/types\";\n\ninterface TransactionFormProps {\n  accounts: Account[];\n  onAddTransaction: (data: any) => void;\n  isLoading: boolean;\n}\n\nexport default function TransactionForm({ accounts, onAddTransaction, isLoading }: TransactionFormProps) {\n  const [accountId, setAccountId] = useState('');\n  const [transactionType, setTransactionType] = useState<'income' | 'expense'>('income');\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!accountId || !amount || !description) {\n      return;\n    }\n\n    onAddTransaction({\n      accountId,\n      type: transactionType,\n      amount: parseFloat(amount).toFixed(4),\n      description,\n      category: category || null\n    });\n\n    // Reset form\n    setAccountId('');\n    setAmount('');\n    setDescription('');\n    setCategory('');\n    setTransactionType('income');\n  };\n\n  return (\n    <Card data-testid=\"card-transaction-form\">\n      <CardHeader>\n        <CardTitle data-testid=\"transaction-form-title\">Yeni İşlem</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"transactionAccount\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Hesap\n            </Label>\n            <Select value={accountId} onValueChange={setAccountId}>\n              <SelectTrigger data-testid=\"select-transaction-account\">\n                <SelectValue placeholder=\"Hesap seçin\" />\n              </SelectTrigger>\n              <SelectContent>\n                {accounts.map((account) => (\n                  <SelectItem key={account.id} value={account.id}>\n                    {account.bankName} - {account.accountName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label className=\"block text-sm font-medium text-foreground mb-2\">İşlem Türü</Label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                type=\"button\"\n                variant={transactionType === 'income' ? 'default' : 'outline'}\n                onClick={() => setTransactionType('income')}\n                className={transactionType === 'income' ? 'bg-accent hover:bg-accent/90' : ''}\n                data-testid=\"button-transaction-type-income\"\n              >\n                Gelir\n              </Button>\n              <Button\n                type=\"button\"\n                variant={transactionType === 'expense' ? 'default' : 'outline'}\n                onClick={() => setTransactionType('expense')}\n                className={transactionType === 'expense' ? 'bg-destructive hover:bg-destructive/90' : ''}\n                data-testid=\"button-transaction-type-expense\"\n              >\n                Gider\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"transactionAmount\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Miktar\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"transactionAmount\"\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                className=\"pr-12\"\n                step=\"0.01\"\n                min=\"0\"\n                required\n                data-testid=\"input-transaction-amount\"\n              />\n              <span className=\"absolute right-3 top-2 text-sm text-muted-foreground\">TRY</span>\n            </div>\n            <div className=\"flex gap-2 mt-2 flex-wrap\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('50')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-50\"\n              >\n                ₺50\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('100')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-100\"\n              >\n                ₺100\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('250')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-250\"\n              >\n                ₺250\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('500')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-500\"\n              >\n                ₺500\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('1000')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-1000\"\n              >\n                ₺1000\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"transactionCategory\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Kategori\n            </Label>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger data-testid=\"select-transaction-category\">\n                <SelectValue placeholder=\"Kategori seçin (opsiyonel)\" />\n              </SelectTrigger>\n              <SelectContent>\n                {transactionCategories[transactionType].map((cat) => (\n                  <SelectItem key={cat.value} value={cat.value}>\n                    {cat.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"transactionDescription\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Açıklama\n            </Label>\n            <Input\n              id=\"transactionDescription\"\n              placeholder=\"İşlem açıklaması\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              required\n              data-testid=\"input-transaction-description\"\n            />\n          </div>\n          \n          <Button\n            type=\"submit\"\n            className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n            disabled={isLoading || !accountId || !amount || !description}\n            data-testid=\"button-submit-transaction\"\n          >\n            {isLoading ? 'Ekleniyor...' : 'İşlem Ekle'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7606},"client/src/components/transaction-item.tsx":{"content":"import { ArrowLeft, ArrowRight, ArrowLeftRight, Tag } from \"lucide-react\";\nimport { getCategoryLabel } from \"@shared/schema\";\nimport type { Transaction, Account } from \"@/lib/types\";\n\ninterface TransactionItemProps {\n  transaction: Transaction;\n  accounts: Account[];\n  formatCurrency: (amount: string) => string;\n}\n\nexport default function TransactionItem({ transaction, accounts, formatCurrency }: TransactionItemProps) {\n  const account = accounts.find(a => a.id === transaction.accountId);\n  \n  const getTransactionIcon = () => {\n    switch (transaction.type) {\n      case 'income':\n        return <ArrowLeft className=\"w-5 h-5 text-accent\" />;\n      case 'expense':\n        return <ArrowRight className=\"w-5 h-5 text-destructive\" />;\n      case 'transfer_in':\n      case 'transfer_out':\n        return <ArrowLeftRight className=\"w-5 h-5 text-primary\" />;\n      default:\n        return <ArrowLeftRight className=\"w-5 h-5 text-muted-foreground\" />;\n    }\n  };\n\n  const getTransactionColor = () => {\n    switch (transaction.type) {\n      case 'income':\n      case 'transfer_in':\n        return 'text-accent';\n      case 'expense':\n      case 'transfer_out':\n        return 'text-destructive';\n      default:\n        return 'text-foreground';\n    }\n  };\n\n  const getTransactionType = () => {\n    switch (transaction.type) {\n      case 'income':\n        return 'Gelir';\n      case 'expense':\n        return 'Gider';\n      case 'transfer_in':\n      case 'transfer_out':\n        return 'Virman';\n      default:\n        return 'İşlem';\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - new Date(date).getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Az önce';\n    if (diffInHours < 24) return `${diffInHours} saat önce`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays === 1) return '1 gün önce';\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    \n    return new Date(date).toLocaleDateString('tr-TR');\n  };\n\n  const getAmountDisplay = () => {\n    const amount = parseFloat(transaction.amount);\n    const sign = transaction.type === 'income' || transaction.type === 'transfer_in' ? '+' : '-';\n    return `${sign}${formatCurrency(Math.abs(amount).toString())}`;\n  };\n\n  return (\n    <div \n      className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\"\n      data-testid={`transaction-item-${transaction.id}`}\n    >\n      <div className=\"flex items-center\">\n        <div className={`w-10 h-10 rounded-lg flex items-center justify-center mr-4 ${\n          transaction.type === 'income' ? 'bg-accent/10' :\n          transaction.type === 'expense' ? 'bg-destructive/10' : 'bg-primary/10'\n        }`}>\n          {getTransactionIcon()}\n        </div>\n        <div>\n          <p className=\"text-sm font-medium text-foreground\" data-testid={`text-description-${transaction.id}`}>\n            {transaction.description}\n          </p>\n          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n            <span data-testid={`text-date-${transaction.id}`}>\n              {formatDate(transaction.date)} • {account?.bankName || 'Bilinmeyen Hesap'}\n            </span>\n            {transaction.category && (\n              <>\n                <span>•</span>\n                <div className=\"flex items-center gap-1\" data-testid={`text-category-${transaction.id}`}>\n                  <Tag className=\"w-3 h-3\" />\n                  <span>{getCategoryLabel(transaction.category)}</span>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className={`text-sm font-semibold ${getTransactionColor()}`} data-testid={`text-amount-${transaction.id}`}>\n          {getAmountDisplay()}\n        </p>\n        <p className=\"text-xs text-muted-foreground\" data-testid={`text-type-${transaction.id}`}>\n          {getTransactionType()}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4047},"client/src/components/transfer-form.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { Account } from \"@/lib/types\";\n\ninterface TransferFormProps {\n  accounts: Account[];\n  onTransfer: (data: any) => void;\n  isLoading: boolean;\n}\n\nexport default function TransferForm({ accounts, onTransfer, isLoading }: TransferFormProps) {\n  const [fromAccountId, setFromAccountId] = useState('');\n  const [toAccountId, setToAccountId] = useState('');\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!fromAccountId || !toAccountId || !amount || fromAccountId === toAccountId) {\n      return;\n    }\n\n    onTransfer({\n      fromAccountId,\n      toAccountId,\n      amount: parseFloat(amount),\n      description\n    });\n\n    // Reset form\n    setFromAccountId('');\n    setToAccountId('');\n    setAmount('');\n    setDescription('');\n  };\n\n  return (\n    <Card data-testid=\"card-transfer-form\">\n      <CardHeader>\n        <CardTitle data-testid=\"transfer-form-title\">Hızlı Virman</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"fromAccount\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Gönderen Hesap\n            </Label>\n            <Select value={fromAccountId} onValueChange={setFromAccountId}>\n              <SelectTrigger data-testid=\"select-from-account\">\n                <SelectValue placeholder=\"Hesap seçin\" />\n              </SelectTrigger>\n              <SelectContent>\n                {accounts.map((account) => (\n                  <SelectItem key={account.id} value={account.id}>\n                    {account.bankName} - {account.accountName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"toAccount\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Alıcı Hesap\n            </Label>\n            <Select value={toAccountId} onValueChange={setToAccountId}>\n              <SelectTrigger data-testid=\"select-to-account\">\n                <SelectValue placeholder=\"Hesap seçin\" />\n              </SelectTrigger>\n              <SelectContent>\n                {accounts\n                  .filter(account => account.id !== fromAccountId)\n                  .map((account) => (\n                    <SelectItem key={account.id} value={account.id}>\n                      {account.bankName} - {account.accountName}\n                    </SelectItem>\n                  ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"transferAmount\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Miktar\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"transferAmount\"\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                className=\"pr-12\"\n                step=\"0.01\"\n                min=\"0\"\n                required\n                data-testid=\"input-transfer-amount\"\n              />\n              <span className=\"absolute right-3 top-2 text-sm text-muted-foreground\">TRY</span>\n            </div>\n            <div className=\"flex gap-2 mt-2 flex-wrap\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('50')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-50\"\n              >\n                ₺50\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('100')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-100\"\n              >\n                ₺100\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('250')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-250\"\n              >\n                ₺250\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('500')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-500\"\n              >\n                ₺500\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAmount('1000')}\n                className=\"text-xs px-3 py-1 h-7\"\n                data-testid=\"button-quick-amount-1000\"\n              >\n                ₺1000\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"transferDescription\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Açıklama\n            </Label>\n            <Input\n              id=\"transferDescription\"\n              placeholder=\"İşlem açıklaması (opsiyonel)\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              data-testid=\"input-transfer-description\"\n            />\n          </div>\n          \n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n            disabled={isLoading || !fromAccountId || !toAccountId || !amount || fromAccountId === toAccountId}\n            data-testid=\"button-submit-transfer\"\n          >\n            {isLoading ? 'İşleniyor...' : 'Virman Yap'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6431},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface Account {\n  id: string;\n  type: 'personal' | 'company';\n  bankName: string;\n  accountName: string;\n  balance: string;\n  currency: string;\n}\n\nexport interface Transaction {\n  id: string;\n  accountId: string;\n  type: 'income' | 'expense' | 'transfer_in' | 'transfer_out';\n  amount: string;\n  description: string;\n  category?: string;\n  virmanPairId?: string;\n  date: Date;\n}\n\nexport interface TransferRequest {\n  fromAccountId: string;\n  toAccountId: string;\n  amount: number;\n  description?: string;\n}\n","size_bytes":518},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AccountCard from \"@/components/account-card\";\nimport TransactionItem from \"@/components/transaction-item\";\nimport AddAccountDialog from \"@/components/add-account-dialog\";\nimport TransferForm from \"@/components/transfer-form\";\nimport TransactionForm from \"@/components/transaction-form\";\nimport KPIBar from \"@/components/kpi-bar\";\nimport { PWAInstallPrompt } from \"@/components/pwa-install-prompt\";\nimport { AlertsNotification } from \"@/components/AlertsNotification\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Filter } from \"lucide-react\";\nimport { getAllCategories, getCategoryLabel } from \"@shared/schema\";\nimport type { Account, Transaction } from \"@/lib/types\";\n\nexport default function Dashboard() {\n  const [showAddAccountDialog, setShowAddAccountDialog] = useState(false);\n  const [selectedAccountFilter, setSelectedAccountFilter] = useState<string>(\"all\");\n  const [selectedCategoryFilter, setSelectedCategoryFilter] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  // Single dashboard query for better performance\n  const { data: dashboardData, isLoading: dashboardLoading } = useQuery<{\n    accounts: Account[];\n    recentTransactions: Transaction[];\n    totalBalance: number;\n    companyBalance: number;\n    personalBalance: number;\n    totalCash: number;\n    totalDebt: number;\n    totalTransactions: number;\n  }>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const accounts = dashboardData?.accounts || [];\n  const transactions = dashboardData?.recentTransactions || [];\n  const isLoading = dashboardLoading;\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const addAccountMutation = useMutation({\n    mutationFn: async (accountData: { type: string; bankName: string; accountName: string; balance: string; currency: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/accounts\", accountData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      setShowAddAccountDialog(false);\n      toast({\n        title: \"Başarılı\",\n        description: \"Hesap başarıyla eklendi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Hesap eklenirken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addTransactionMutation = useMutation({\n    mutationFn: async (transactionData: { accountId: string; type: string; amount: string; description: string; category?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/transactions\", transactionData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"İşlem başarıyla eklendi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"İşlem eklenirken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const transferMutation = useMutation({\n    mutationFn: async (transferData: { fromAccountId: string; toAccountId: string; amount: number; description?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/virman\", transferData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Virman işlemi başarıyla tamamlandı\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Virman işleminde bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTransactions = transactions.filter(transaction => {\n    const accountMatch = selectedAccountFilter === \"all\" || transaction.accountId === selectedAccountFilter;\n    const categoryMatch = selectedCategoryFilter === \"all\" || transaction.category === selectedCategoryFilter;\n    return accountMatch && categoryMatch;\n  });\n\n  const formatCurrency = (amount: string) => {\n    const num = parseFloat(amount);\n    return new Intl.NumberFormat('tr-TR', {\n      style: 'currency',\n      currency: 'TRY'\n    }).format(num);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* PWA Install Prompt */}\n      <PWAInstallPrompt />\n      \n      {/* Header with Add Account Button and Alerts */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"dashboard-title\">Finansal Yönetim Panosu</h1>\n        <div className=\"flex items-center gap-3\">\n          <AlertsNotification />\n          <Button \n            onClick={() => setShowAddAccountDialog(true)}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            data-testid=\"button-add-account\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Hesap Ekle\n          </Button>\n        </div>\n      </div>\n      \n      {/* KPI Bar */}\n      <KPIBar \n        totalCash={dashboardData?.totalCash || 0}\n        totalDebt={dashboardData?.totalDebt || 0}\n        totalBalance={dashboardData?.totalBalance || 0}\n        formatCurrency={formatCurrency}\n        isLoading={isLoading}\n      />\n      \n      {/* Dashboard Overview */}\n      <div>\n          <div className=\"md:flex md:items-center md:justify-between\">\n            <div className=\"flex-1 min-w-0\">\n              <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\" data-testid=\"page-title\">\n                Genel Bakış\n              </h2>\n              <p className=\"mt-1 text-sm text-muted-foreground\" data-testid=\"page-description\">\n                Tüm hesaplarınızı ve son işlemlerinizi görüntüleyin\n              </p>\n            </div>\n            <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"last-updated\">\n                Son güncelleme: 2 dakika önce\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Account Cards Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {isLoading ? (\n            <div className=\"col-span-full text-center py-8\" data-testid=\"accounts-loading\">\n              Hesaplar yükleniyor...\n            </div>\n          ) : (\n            <>\n              {accounts.map((account) => (\n                <AccountCard \n                  key={account.id} \n                  account={account} \n                  formatCurrency={formatCurrency}\n                />\n              ))}\n              {/* Add Account Card */}\n              <div \n                className=\"bg-card rounded-lg border-2 border-dashed border-border p-6 shadow-sm hover:border-primary/50 transition-colors cursor-pointer\"\n                onClick={() => setShowAddAccountDialog(true)}\n                data-testid=\"card-add-account\"\n              >\n                <div className=\"flex flex-col items-center justify-center h-full text-center\">\n                  <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center mb-4\">\n                    <Plus className=\"w-6 h-6 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-sm font-medium text-foreground mb-1\">Yeni Hesap Ekle</h3>\n                  <p className=\"text-xs text-muted-foreground\">Yeni bir banka hesabı ekleyin</p>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Transaction History */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle data-testid=\"transactions-title\">Son İşlemler</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Select value={selectedAccountFilter} onValueChange={setSelectedAccountFilter}>\n                      <SelectTrigger className=\"w-36\" data-testid=\"select-account-filter\">\n                        <SelectValue placeholder=\"Hesap seçin\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Tüm Hesaplar</SelectItem>\n                        {accounts.map((account) => (\n                          <SelectItem key={account.id} value={account.id}>\n                            {account.bankName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Select value={selectedCategoryFilter} onValueChange={setSelectedCategoryFilter}>\n                      <SelectTrigger className=\"w-36\" data-testid=\"select-category-filter\">\n                        <SelectValue placeholder=\"Kategori seçin\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Tüm Kategoriler</SelectItem>\n                        {getAllCategories().map((category) => (\n                          <SelectItem key={category.value} value={category.value}>\n                            {category.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-transactions\">\n                      <Filter className=\"w-4 h-4 mr-1\" />\n                      Filtrele\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"transactions-loading\">\n                    İşlemler yükleniyor...\n                  </div>\n                ) : filteredTransactions.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-transactions\">\n                    Henüz işlem bulunmuyor\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredTransactions.slice(0, 10).map((transaction) => (\n                      <TransactionItem \n                        key={transaction.id} \n                        transaction={transaction} \n                        accounts={accounts}\n                        formatCurrency={formatCurrency}\n                      />\n                    ))}\n                    {filteredTransactions.length > 10 && (\n                      <div className=\"pt-4\">\n                        <Button variant=\"ghost\" className=\"w-full\" data-testid=\"button-load-more-transactions\">\n                          Daha Fazla İşlem Yükle\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"space-y-6\">\n            {/* Money Transfer Card */}\n            <TransferForm \n              accounts={accounts}\n              onTransfer={(data: { fromAccountId: string; toAccountId: string; amount: number; description?: string }) => transferMutation.mutate(data)}\n              isLoading={transferMutation.isPending}\n            />\n\n            {/* Add Transaction Card */}\n            <TransactionForm \n              accounts={accounts}\n              onAddTransaction={(data: { accountId: string; type: string; amount: string; description: string; category?: string }) => addTransactionMutation.mutate(data)}\n              isLoading={addTransactionMutation.isPending}\n            />\n          </div>\n        </div>\n\n        {/* Add Account Dialog */}\n        <AddAccountDialog\n          open={showAddAccountDialog}\n          onOpenChange={setShowAddAccountDialog}\n          onAddAccount={(data: { type: string; bankName: string; accountName: string; balance: string; currency: string }) => addAccountMutation.mutate(data)}\n          isLoading={addAccountMutation.isPending}\n        />\n    </div>\n  );\n}\n","size_bytes":12836},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, BarChart3, TrendingUp } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Ana Sayfa\", icon: Home },\n    { path: \"/analytics\", label: \"Analiz\", icon: BarChart3 },\n  ];\n\n  return (\n    <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-6 w-6 text-primary\" />\n            <h1 className=\"text-xl font-bold\" data-testid=\"app-title\">FinBot</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-1\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              \n              return (\n                <Link key={item.path} href={item.path}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    size=\"sm\"\n                    className=\"flex items-center gap-2\"\n                    data-testid={`nav-${item.path.replace(\"/\", \"\") || \"home\"}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":1610},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, LineChart, Line } from \"recharts\";\nimport { TrendingUp, TrendingDown, PieChart as PieChartIcon, BarChart3, Calendar } from \"lucide-react\";\nimport { getCategoryLabel } from \"@shared/schema\";\nimport type { Account, Transaction } from \"@/lib/types\";\n\ninterface ChartData {\n  name: string;\n  value: number;\n  label: string;\n}\n\ninterface MonthlyData {\n  month: string;\n  income: number;\n  expense: number;\n  net: number;\n}\n\nconst COLORS = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#06b6d4', '#84cc16', '#f97316'];\n\nexport default function Analytics() {\n  const [selectedTimeRange, setSelectedTimeRange] = useState<string>(\"3months\");\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  // Calculate time range for filtering\n  const getDateCutoff = (range: string) => {\n    const now = new Date();\n    switch (range) {\n      case \"1month\":\n        return new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n      case \"3months\":\n        return new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\n      case \"6months\":\n        return new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\n      case \"1year\":\n        return new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n      default:\n        return new Date(0); // All time\n    }\n  };\n\n  const filteredTransactions = transactions.filter(transaction => {\n    if (selectedTimeRange === \"all\") return true;\n    const cutoffDate = getDateCutoff(selectedTimeRange);\n    return new Date(transaction.date) >= cutoffDate;\n  });\n\n  // Calculate expense breakdown by category\n  const expensesByCategory = filteredTransactions\n    .filter(t => t.type === 'expense' && t.category)\n    .reduce((acc, transaction) => {\n      const category = transaction.category!;\n      const categoryLabel = getCategoryLabel(category);\n      acc[category] = (acc[category] || 0) + parseFloat(transaction.amount);\n      return acc;\n    }, {} as Record<string, number>);\n\n  const expenseCategoryData: ChartData[] = Object.entries(expensesByCategory).map(([category, amount]) => ({\n    name: category,\n    value: amount,\n    label: getCategoryLabel(category)\n  }));\n\n  // Calculate income breakdown by category  \n  const incomesByCategory = filteredTransactions\n    .filter(t => t.type === 'income' && t.category)\n    .reduce((acc, transaction) => {\n      const category = transaction.category!;\n      acc[category] = (acc[category] || 0) + parseFloat(transaction.amount);\n      return acc;\n    }, {} as Record<string, number>);\n\n  const incomeCategoryData: ChartData[] = Object.entries(incomesByCategory).map(([category, amount]) => ({\n    name: category,\n    value: amount,\n    label: getCategoryLabel(category)\n  }));\n\n  // Calculate monthly income vs expense trends\n  const monthlyData = filteredTransactions.reduce((acc, transaction) => {\n    const date = new Date(transaction.date);\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n    const monthLabel = date.toLocaleDateString('tr-TR', { year: 'numeric', month: 'short' });\n    \n    if (!acc[monthKey]) {\n      acc[monthKey] = { month: monthLabel, monthKey, income: 0, expense: 0, net: 0 };\n    }\n    \n    const amount = parseFloat(transaction.amount);\n    if (transaction.type === 'income') {\n      acc[monthKey].income += amount;\n    } else if (transaction.type === 'expense') {\n      acc[monthKey].expense += amount;\n    }\n    \n    return acc;\n  }, {} as Record<string, MonthlyData & { monthKey: string }>);\n\n  // Sort by actual chronological order and calculate cumulative balance\n  const sortedMonthlyData = Object.values(monthlyData)\n    .sort((a, b) => a.monthKey.localeCompare(b.monthKey));\n  \n  let runningBalance = 0;\n  const monthlyTrends: MonthlyData[] = sortedMonthlyData.map(month => {\n    const monthlyNet = month.income - month.expense;\n    runningBalance += monthlyNet;\n    return {\n      month: month.month,\n      income: month.income,\n      expense: month.expense,\n      net: runningBalance // Now shows cumulative net balance\n    };\n  });\n\n  // Calculate total metrics\n  const totalIncome = filteredTransactions\n    .filter(t => t.type === 'income')\n    .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n  const totalExpenses = filteredTransactions\n    .filter(t => t.type === 'expense')\n    .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n  const netBalance = totalIncome - totalExpenses;\n  \n  // Show loading state while data is being fetched\n  const isLoading = accountsLoading || transactionsLoading;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('tr-TR', {\n      style: 'currency',\n      currency: 'TRY',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const chartConfig = {\n    income: {\n      label: \"Gelir\",\n      color: \"#10b981\",\n    },\n    expense: {\n      label: \"Gider\", \n      color: \"#ef4444\",\n    },\n    net: {\n      label: \"Net\",\n      color: \"#3b82f6\",\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"analytics-title\">Finansal Analiz</h1>\n          <div className=\"w-40 h-10 bg-muted animate-pulse rounded-md\" />\n        </div>\n        \n        {/* Loading skeletons for summary cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader className=\"space-y-2\">\n                <div className=\"h-4 bg-muted animate-pulse rounded w-24\" />\n                <div className=\"h-8 bg-muted animate-pulse rounded w-32\" />\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n        \n        {/* Loading skeletons for charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <div className=\"h-5 bg-muted animate-pulse rounded w-48\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80 bg-muted animate-pulse rounded\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"analytics-title\">Finansal Analiz</h1>\n        <Select value={selectedTimeRange} onValueChange={setSelectedTimeRange}>\n          <SelectTrigger className=\"w-40\" data-testid=\"select-time-range\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"1month\">Son 1 Ay</SelectItem>\n            <SelectItem value=\"3months\">Son 3 Ay</SelectItem>\n            <SelectItem value=\"6months\">Son 6 Ay</SelectItem>\n            <SelectItem value=\"1year\">Son 1 Yıl</SelectItem>\n            <SelectItem value=\"all\">Tüm Zamanlar</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card data-testid=\"card-total-income\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Toplam Gelir</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"total-income\">\n              {formatCurrency(totalIncome)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-expenses\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Toplam Gider</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"total-expenses\">\n              {formatCurrency(totalExpenses)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-net-balance\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Net Bakiye</CardTitle>\n            {netBalance >= 0 ? (\n              <TrendingUp className=\"h-4 w-4 text-green-600\" />\n            ) : (\n              <TrendingDown className=\"h-4 w-4 text-red-600\" />\n            )}\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${netBalance >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"net-balance\">\n              {formatCurrency(netBalance)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Monthly Trends Chart */}\n        <Card data-testid=\"card-monthly-trends\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Aylık Gelir vs Gider Trendi\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={chartConfig} className=\"h-80\">\n              <BarChart data={monthlyTrends}>\n                <XAxis dataKey=\"month\" />\n                <YAxis />\n                <ChartTooltip content={<ChartTooltipContent />} />\n                <Bar dataKey=\"income\" fill=\"#10b981\" />\n                <Bar dataKey=\"expense\" fill=\"#ef4444\" />\n              </BarChart>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n\n        {/* Expense Categories Pie Chart */}\n        <Card data-testid=\"card-expense-categories\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChartIcon className=\"h-5 w-5\" />\n              Gider Kategorileri\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={{}} className=\"h-80\">\n              <PieChart>\n                <Pie\n                  data={expenseCategoryData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({ label, percent }) => `${label} (${(percent * 100).toFixed(1)}%)`}\n                >\n                  {expenseCategoryData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <ChartTooltip content={<ChartTooltipContent />} />\n              </PieChart>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n\n        {/* Income Categories Pie Chart */}\n        <Card data-testid=\"card-income-categories\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChartIcon className=\"h-5 w-5\" />\n              Gelir Kategorileri\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={{}} className=\"h-80\">\n              <PieChart>\n                <Pie\n                  data={incomeCategoryData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({ label, percent }) => `${label} (${(percent * 100).toFixed(1)}%)`}\n                >\n                  {incomeCategoryData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <ChartTooltip content={<ChartTooltipContent />} />\n              </PieChart>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n\n        {/* Cumulative Balance Trend */}\n        <Card data-testid=\"card-net-trend\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Kümülatif Bakiye Trendi\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={chartConfig} className=\"h-80\">\n              <LineChart data={monthlyTrends}>\n                <XAxis dataKey=\"month\" />\n                <YAxis />\n                <ChartTooltip content={<ChartTooltipContent />} />\n                <Line type=\"monotone\" dataKey=\"net\" stroke=\"#3b82f6\" strokeWidth={2} />\n              </LineChart>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13388},"client/src/components/app-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Building2,\n  User,\n  ArrowLeftRight,\n  Calendar,\n  CreditCard,\n  FileText,\n  Bell,\n  Settings,\n  Home,\n  BarChart3,\n  TrendingUp,\n  Shield,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { UserRoleType } from \"@shared/schema\";\n\ninterface MenuItem {\n  title: string;\n  path: string;\n  icon: any;\n  requiredRole?: UserRoleType;\n}\n\ninterface MenuGroup {\n  title: string;\n  items: MenuItem[];\n  requiredRole?: UserRoleType;\n}\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems: MenuItem[] = [\n  {\n    title: \"Genel Özet\",\n    path: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Şirket\",\n    path: \"/company\",\n    icon: Building2,\n  },\n  {\n    title: \"Şahsi\",\n    path: \"/personal\",\n    icon: User,\n  },\n  {\n    title: \"Virman\",\n    path: \"/transfers\",\n    icon: ArrowLeftRight,\n  },\n  {\n    title: \"Sabit Gider\",\n    path: \"/fixed-expenses\",\n    icon: Calendar,\n  },\n  {\n    title: \"Kredi/Kart\",\n    path: \"/credit-cards\",\n    icon: CreditCard,\n  },\n  {\n    title: \"Raporlar\",\n    path: \"/reports\",\n    icon: FileText,\n  },\n  {\n    title: \"Uyarılar\",\n    path: \"/alerts\",\n    icon: Bell,\n  },\n  {\n    title: \"Ayarlar\",\n    path: \"/settings\",\n    icon: Settings,\n  },\n  {\n    title: \"Kullanıcı Yönetimi\",\n    path: \"/admin\",\n    icon: Shield,\n    requiredRole: \"admin\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-2 px-3 py-2\">\n          <TrendingUp className=\"h-6 w-6 text-primary\" />\n          <span className=\"text-lg font-bold\" data-testid=\"sidebar-title\">FinBot</span>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => {\n                // Hide admin items for non-admin users\n                if (item.requiredRole && user?.role !== item.requiredRole) {\n                  return null;\n                }\n\n                const Icon = item.icon;\n                const isActive = location === item.path;\n                \n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={isActive}>\n                      <Link href={item.path} data-testid={`sidebar-${item.path.replace(\"/\", \"\") || \"home\"}`}>\n                        <Icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":3048},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun, Monitor } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/lib/theme-context\";\n\nexport function ThemeToggle() {\n  const { setTheme, theme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"h-9 w-9 px-0\"\n          data-testid=\"button-theme-toggle\"\n        >\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Tema değiştir</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" data-testid=\"dropdown-theme-menu\">\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")}\n          className={theme === \"light\" ? \"bg-accent\" : \"\"}\n          data-testid=\"theme-light\"\n        >\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Açık</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")}\n          className={theme === \"dark\" ? \"bg-accent\" : \"\"}\n          data-testid=\"theme-dark\"\n        >\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Koyu</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")}\n          className={theme === \"system\" ? \"bg-accent\" : \"\"}\n          data-testid=\"theme-system\"\n        >\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>Sistem</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1883},"client/src/lib/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"finbot-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1606},"client/src/pages/company.tsx":{"content":"export default function Company() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Şirket Hesapları</h1>\n      </div>\n      \n      <div className=\"text-center py-16 text-muted-foreground\">\n        <h2 className=\"text-xl mb-2\">Şirket Modülü</h2>\n        <p>Şirket hesapları ve işlemlerini buradan yönetebilirsiniz.</p>\n        <p className=\"text-sm mt-2 text-yellow-600\">Bu modül yakında gelecek...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":565},"client/src/pages/credit-cards.tsx":{"content":"export default function CreditCards() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Kredi ve Kartlar</h1>\n      </div>\n      \n      <div className=\"text-center py-16 text-muted-foreground\">\n        <h2 className=\"text-xl mb-2\">Kredi/Kart Modülü</h2>\n        <p>Kredi kartlarınızı ve kredilerinizi buradan yönetebilirsiniz.</p>\n        <p className=\"text-sm mt-2 text-yellow-600\">Bu modül yakında gelecek...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":574},"client/src/pages/fixed-expenses.tsx":{"content":"export default function FixedExpenses() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Sabit Giderler</h1>\n      </div>\n      \n      <div className=\"text-center py-16 text-muted-foreground\">\n        <h2 className=\"text-xl mb-2\">Sabit Gider Modülü</h2>\n        <p>Düzenli giderlerinizi ve aboneliklerinizi buradan takip edebilirsiniz.</p>\n        <p className=\"text-sm mt-2 text-yellow-600\">Bu modül yakında gelecek...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":581},"client/src/pages/personal.tsx":{"content":"export default function Personal() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Şahsi Hesaplar</h1>\n      </div>\n      \n      <div className=\"text-center py-16 text-muted-foreground\">\n        <h2 className=\"text-xl mb-2\">Şahsi Modülü</h2>\n        <p>Kişisel hesaplarınızı ve işlemlerinizi buradan yönetebilirsiniz.</p>\n        <p className=\"text-sm mt-2 text-yellow-600\">Bu modül yakında gelecek...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":571},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { TransactionJsonManager } from \"@/components/TransactionJsonManager\";\nimport { Download, FileText, FileSpreadsheet, Calendar, AlertTriangle } from \"lucide-react\";\n\nexport default function Reports() {\n  const [exportLoading, setExportLoading] = useState<{ csv: boolean; pdf: boolean; sheets: boolean }>({\n    csv: false,\n    pdf: false,\n    sheets: false\n  });\n  \n  const { toast } = useToast();\n\n  // Function to handle file download\n  const downloadFile = async (url: string, filename: string, type: 'csv' | 'pdf' | 'sheets') => {\n    try {\n      setExportLoading(prev => ({ ...prev, [type]: true }));\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        credentials: 'include', // Include session cookies\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ error: 'Bilinmeyen hata' }));\n        throw new Error(error.error || `HTTP ${response.status}`);\n      }\n\n      // Create blob and download\n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(downloadUrl);\n\n      toast({\n        title: \"Başarılı\",\n        description: `${type.toUpperCase()} raporu başarıyla indirildi`,\n      });\n    } catch (error) {\n      console.error(`${type} export error:`, error);\n      toast({\n        title: \"Hata\",\n        description: error instanceof Error ? error.message : `${type.toUpperCase()} raporu indirilemedi`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setExportLoading(prev => ({ ...prev, [type]: false }));\n    }\n  };\n\n  const exportCsv = () => {\n    const timestamp = new Date().toISOString().split('T')[0];\n    downloadFile('/api/export/csv', `finbot-islemler-${timestamp}.csv`, 'csv');\n  };\n\n  const exportPdf = () => {\n    const timestamp = new Date().toISOString().split('T')[0];\n    downloadFile('/api/export/pdf', `finbot-rapor-${timestamp}.pdf`, 'pdf');\n  };\n\n  const exportGoogleSheets = async () => {\n    try {\n      setExportLoading(prev => ({ ...prev, sheets: true }));\n      \n      const response = await fetch('/api/export/google-sheets', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ error: 'Bilinmeyen hata' }));\n        throw new Error(error.error || `HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      toast({\n        title: \"Başarılı\",\n        description: `${result.recordCount} kayıt Google Sheets'e aktarıldı`,\n      });\n\n      // Open Google Sheets in a new tab\n      if (result.url) {\n        window.open(result.url, '_blank');\n      }\n\n    } catch (error) {\n      console.error('Google Sheets export error:', error);\n      toast({\n        title: \"Hata\",\n        description: error instanceof Error ? error.message : \"Google Sheets export başarısız\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExportLoading(prev => ({ ...prev, sheets: false }));\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Raporlar</h1>\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <Calendar className=\"h-4 w-4\" />\n          Son güncelleme: {new Date().toLocaleDateString('tr-TR')}\n        </div>\n      </div>\n      \n      {/* Data Export Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Download className=\"h-5 w-5\" />\n            Veri Dışa Aktarımı\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Finansal verilerinizi farklı formatlarda dışa aktarın ve kaydedin.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* CSV Export */}\n            <Card className=\"border-dashed\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center space-y-3\">\n                  <FileSpreadsheet className=\"h-12 w-12 text-green-600 mx-auto\" />\n                  <div>\n                    <h3 className=\"font-semibold\">CSV Formatında</h3>\n                    <p className=\"text-sm text-muted-foreground\">Excel uyumlu veri dosyası</p>\n                  </div>\n                  <Button \n                    onClick={exportCsv}\n                    disabled={exportLoading.csv}\n                    className=\"w-full\"\n                    data-testid=\"button-export-csv\"\n                  >\n                    {exportLoading.csv ? (\n                      <>\n                        <Download className=\"h-4 w-4 animate-spin mr-2\" />\n                        İndiriliyor...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        CSV İndir\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* PDF Export */}\n            <Card className=\"border-dashed\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center space-y-3\">\n                  <FileText className=\"h-12 w-12 text-red-600 mx-auto\" />\n                  <div>\n                    <h3 className=\"font-semibold\">PDF Raporu</h3>\n                    <p className=\"text-sm text-muted-foreground\">Detaylı finansal rapor</p>\n                  </div>\n                  <Button \n                    onClick={exportPdf}\n                    disabled={exportLoading.pdf}\n                    className=\"w-full\"\n                    data-testid=\"button-export-pdf\"\n                  >\n                    {exportLoading.pdf ? (\n                      <>\n                        <Download className=\"h-4 w-4 animate-spin mr-2\" />\n                        Hazırlanıyor...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        PDF İndir\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Google Sheets Export */}\n            <Card className=\"border-dashed\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center space-y-3\">\n                  <FileSpreadsheet className=\"h-12 w-12 text-blue-600 mx-auto\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Google Sheets</h3>\n                    <p className=\"text-sm text-muted-foreground\">Bulut tabanlı çalışma sayfası</p>\n                  </div>\n                  <Button \n                    onClick={exportGoogleSheets}\n                    disabled={exportLoading.sheets}\n                    className=\"w-full\"\n                    data-testid=\"button-export-sheets\"\n                  >\n                    {exportLoading.sheets ? (\n                      <>\n                        <Download className=\"h-4 w-4 animate-spin mr-2\" />\n                        Gönderiliyor...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Sheets'e Gönder\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <Separator />\n          \n          <div className=\"text-sm text-muted-foreground space-y-2\">\n            <p><strong>Not:</strong> Dışa aktarılan veriler, kullanıcı rolünüze göre filtrelenir.</p>\n            <ul className=\"list-disc list-inside space-y-1 ml-4\">\n              <li>CSV dosyası Excel'de açılabilir ve düzenlenebilir</li>\n              <li>PDF raporu yazdırılmaya hazır formattadır</li>\n              <li>Tüm veriler güvenli şekilde işlenir</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Rapor Özeti\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n            <div className=\"space-y-2\">\n              <p className=\"text-2xl font-bold text-blue-600\">CSV</p>\n              <p className=\"text-sm text-muted-foreground\">İşlem detayları</p>\n            </div>\n            <div className=\"space-y-2\">\n              <p className=\"text-2xl font-bold text-red-600\">PDF</p>\n              <p className=\"text-sm text-muted-foreground\">Kapsamlı rapor</p>\n            </div>\n            <div className=\"space-y-2\">\n              <p className=\"text-2xl font-bold text-blue-600\">Sheets</p>\n              <p className=\"text-sm text-muted-foreground\">Google Sheets</p>\n            </div>\n            <div className=\"space-y-2\">\n              <p className=\"text-2xl font-bold text-green-600\">Güvenli</p>\n              <p className=\"text-sm text-muted-foreground\">Veri korunması</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      {/* Transaction JSON Manager */}\n      <TransactionJsonManager />\n    </div>\n  );\n}","size_bytes":10086},"client/src/pages/settings.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useTheme } from \"@/lib/theme-context\";\nimport { Moon, Sun, Monitor } from \"lucide-react\";\n\nexport default function Settings() {\n  const { theme, setTheme } = useTheme();\n\n  const themeOptions = [\n    {\n      value: \"light\",\n      label: \"Açık Tema\",\n      description: \"Daima açık renk teması kullan\",\n      icon: Sun,\n    },\n    {\n      value: \"dark\", \n      label: \"Koyu Tema\",\n      description: \"Daima koyu renk teması kullan\",\n      icon: Moon,\n    },\n    {\n      value: \"system\",\n      label: \"Sistem Teması\",\n      description: \"İşletim sistemi ayarını takip et\",\n      icon: Monitor,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Ayarlar</h1>\n      </div>\n      \n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sun className=\"h-5 w-5\" />\n              Tema Ayarları\n            </CardTitle>\n            <CardDescription>\n              Uygulamanın görünümünü kişiselleştirin\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-base font-medium\">Renk Teması</Label>\n              <RadioGroup \n                value={theme} \n                onValueChange={setTheme}\n                className=\"space-y-3\"\n                data-testid=\"theme-radio-group\"\n              >\n                {themeOptions.map((option) => {\n                  const Icon = option.icon;\n                  return (\n                    <div \n                      key={option.value} \n                      className=\"flex items-center space-x-3 rounded-lg border p-3 hover:bg-accent/50 transition-colors\"\n                    >\n                      <RadioGroupItem \n                        value={option.value} \n                        id={option.value}\n                        data-testid={`radio-theme-${option.value}`}\n                      />\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <Icon className=\"h-5 w-5 text-muted-foreground\" />\n                        <div className=\"space-y-1\">\n                          <Label \n                            htmlFor={option.value}\n                            className=\"font-medium cursor-pointer\"\n                          >\n                            {option.label}\n                          </Label>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {option.description}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </RadioGroup>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Diğer Ayarlar</CardTitle>\n            <CardDescription>\n              Gelecekte eklenecek ayarlar\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>Profil ayarları, bildirim tercihleri ve daha fazlası yakında...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3649},"client/src/pages/transfers.tsx":{"content":"export default function Transfers() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Virman İşlemleri</h1>\n      </div>\n      \n      <div className=\"text-center py-16 text-muted-foreground\">\n        <h2 className=\"text-xl mb-2\">Virman Modülü</h2>\n        <p>Hesaplar arası para transferlerini buradan gerçekleştirebilirsiniz.</p>\n        <p className=\"text-sm mt-2 text-yellow-600\">Bu modül yakında gelecek...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":575},"client/src/components/pwa-install-prompt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { X, Download, Smartphone } from \"lucide-react\";\nimport { pwaInstallManager } from \"@/lib/pwa-utils\";\n\nexport function PWAInstallPrompt() {\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isInstalling, setIsInstalling] = useState(false);\n\n  useEffect(() => {\n    const checkInstallability = () => {\n      const canInstall = pwaInstallManager.canInstall();\n      const isInstalled = pwaInstallManager.getIsInstalled();\n      \n      // Show prompt if can install and not already shown\n      if (canInstall && !isInstalled && !localStorage.getItem('pwa-prompt-dismissed')) {\n        setShowPrompt(true);\n      }\n    };\n\n    // Check immediately\n    checkInstallability();\n\n    // Check periodically\n    const interval = setInterval(checkInstallability, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleInstall = async () => {\n    setIsInstalling(true);\n    \n    try {\n      const installed = await pwaInstallManager.showInstallPrompt();\n      if (installed) {\n        setShowPrompt(false);\n      }\n    } catch (error) {\n      console.error('Install failed:', error);\n    } finally {\n      setIsInstalling(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    localStorage.setItem('pwa-prompt-dismissed', 'true');\n  };\n\n  if (!showPrompt) {\n    return null;\n  }\n\n  return (\n    <Alert className=\"mb-4 border-primary bg-primary/5\" data-testid=\"pwa-install-prompt\">\n      <Smartphone className=\"h-4 w-4\" />\n      <AlertDescription className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex-1\">\n          <span className=\"font-medium\">FinBot'u telefonuna indir!</span>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Offline erişim, push bildirimleri ve daha hızlı performans.\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"default\"\n            onClick={handleInstall}\n            disabled={isInstalling}\n            data-testid=\"button-pwa-install\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            {isInstalling ? 'Yükleniyor...' : 'Yükle'}\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleDismiss}\n            data-testid=\"button-pwa-dismiss\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":2662},"client/src/lib/pwa-utils.ts":{"content":"// PWA Install Prompt Utility\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nclass PWAInstallManager {\n  private deferredPrompt: BeforeInstallPromptEvent | null = null;\n  private isInstalled = false;\n\n  constructor() {\n    this.init();\n  }\n\n  private init() {\n    // Install prompt event listener\n    window.addEventListener('beforeinstallprompt', (e) => {\n      console.log('[PWA] beforeinstallprompt event fired');\n      e.preventDefault();\n      this.deferredPrompt = e as BeforeInstallPromptEvent;\n    });\n\n    // App installed event\n    window.addEventListener('appinstalled', () => {\n      console.log('[PWA] App installed');\n      this.isInstalled = true;\n      this.deferredPrompt = null;\n    });\n\n    // Check if already installed\n    this.checkIfInstalled();\n  }\n\n  private checkIfInstalled() {\n    // Check if running as PWA\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isWebApp = (window.navigator as any).standalone === true;\n    \n    this.isInstalled = isStandalone || isWebApp;\n  }\n\n  async showInstallPrompt(): Promise<boolean> {\n    if (!this.deferredPrompt) {\n      console.log('[PWA] No install prompt available');\n      return false;\n    }\n\n    try {\n      await this.deferredPrompt.prompt();\n      const choiceResult = await this.deferredPrompt.userChoice;\n      \n      console.log('[PWA] User choice:', choiceResult.outcome);\n      \n      if (choiceResult.outcome === 'accepted') {\n        this.deferredPrompt = null;\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('[PWA] Install prompt error:', error);\n      return false;\n    }\n  }\n\n  canInstall(): boolean {\n    return !!this.deferredPrompt && !this.isInstalled;\n  }\n\n  getIsInstalled(): boolean {\n    return this.isInstalled;\n  }\n}\n\nexport const pwaInstallManager = new PWAInstallManager();\n\n// Service Worker Registration\nexport async function registerServiceWorker(): Promise<ServiceWorkerRegistration | null> {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/'\n      });\n\n      console.log('[PWA] SW registered successfully:', registration);\n\n      // Update service worker when available\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              console.log('[PWA] New SW available, reload to update');\n              // Show update notification to user\n              if (confirm('Yeni güncelleme mevcut. Uygulamayı yenileyelim mi?')) {\n                window.location.reload();\n              }\n            }\n          });\n        }\n      });\n\n      return registration;\n    } catch (error) {\n      console.error('[PWA] SW registration failed:', error);\n      return null;\n    }\n  }\n  \n  console.log('[PWA] Service Worker not supported');\n  return null;\n}\n\n// Push Notification Utilities\nexport async function requestNotificationPermission(): Promise<NotificationPermission> {\n  if (!('Notification' in window)) {\n    console.log('[PWA] Notifications not supported');\n    return 'denied';\n  }\n\n  if (Notification.permission === 'granted') {\n    return 'granted';\n  }\n\n  if (Notification.permission === 'denied') {\n    return 'denied';\n  }\n\n  // Request permission\n  const permission = await Notification.requestPermission();\n  console.log('[PWA] Notification permission:', permission);\n  \n  return permission;\n}\n\nexport async function subscribeToPush(registration: ServiceWorkerRegistration): Promise<PushSubscription | null> {\n  try {\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(\n        // VAPID public key - replace with your own\n        'BEl62iUYgUivxIkv69yViEuiBIa40HI80NM9HLg2cHSLztjyzwVjfLV5xCzU-UUyy5LZbDXP_Vx5v6MG5rBu5'\n      )\n    });\n\n    console.log('[PWA] Push subscription successful:', subscription);\n    return subscription;\n  } catch (error) {\n    console.error('[PWA] Push subscription failed:', error);\n    return null;\n  }\n}\n\n// Helper function for VAPID key conversion\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n// Offline Storage for Transactions\nexport class OfflineStorage {\n  private readonly OFFLINE_KEY = 'finbot-offline-transactions';\n\n  async saveOfflineTransaction(transaction: any): Promise<void> {\n    try {\n      const existing = await this.getOfflineTransactions();\n      existing.push({\n        ...transaction,\n        id: Date.now().toString(),\n        offline: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      localStorage.setItem(this.OFFLINE_KEY, JSON.stringify(existing));\n      console.log('[PWA] Transaction saved offline');\n\n      // Register for background sync if available\n      if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\n        const registration = await navigator.serviceWorker.ready;\n        await (registration as any).sync.register('background-sync-transactions');\n      }\n    } catch (error) {\n      console.error('[PWA] Failed to save offline transaction:', error);\n    }\n  }\n\n  getOfflineTransactions(): any[] {\n    try {\n      const stored = localStorage.getItem(this.OFFLINE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('[PWA] Failed to get offline transactions:', error);\n      return [];\n    }\n  }\n\n  clearOfflineTransactions(): void {\n    localStorage.removeItem(this.OFFLINE_KEY);\n  }\n\n  getOfflineCount(): number {\n    const transactions = this.getOfflineTransactions();\n    return transactions.length;\n  }\n}\n\nexport const offlineStorage = new OfflineStorage();","size_bytes":6359},"public/sw.js":{"content":"const CACHE_NAME = 'finbot-v1';\nconst OFFLINE_URL = '/offline.html';\n\n// Öncelikli cache edilecek dosyalar\nconst PRECACHE_URLS = [\n  '/',\n  '/offline.html',\n  '/manifest.json',\n  '/pwa-icon-192.png',\n  '/pwa-icon-512.png'\n];\n\n// Service Worker kurulum\nself.addEventListener('install', event => {\n  console.log('[SW] Install event');\n  \n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('[SW] Pre-caching offline page');\n        return cache.addAll(PRECACHE_URLS);\n      })\n      .then(() => {\n        console.log('[SW] Skip waiting');\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Service Worker aktivasyonu\nself.addEventListener('activate', event => {\n  console.log('[SW] Activate event');\n  \n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('[SW] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      console.log('[SW] Claiming clients');\n      return self.clients.claim();\n    })\n  );\n});\n\n// Fetch event - Network First stratejisi\nself.addEventListener('fetch', event => {\n  // POST istekleri için cache kullanma\n  if (event.request.method !== 'GET') {\n    return;\n  }\n\n  // API çağrıları için Network First\n  if (event.request.url.includes('/api/')) {\n    event.respondWith(\n      fetch(event.request)\n        .then(response => {\n          // Başarılı response'u cache'le\n          if (response.status === 200) {\n            const responseClone = response.clone();\n            caches.open(CACHE_NAME).then(cache => {\n              cache.put(event.request, responseClone);\n            });\n          }\n          return response;\n        })\n        .catch(() => {\n          // Network başarısız, cache'den dön\n          return caches.match(event.request)\n            .then(cachedResponse => {\n              if (cachedResponse) {\n                return cachedResponse;\n              }\n              // Cache'de yoksa offline sayfası\n              return caches.match(OFFLINE_URL);\n            });\n        })\n    );\n    return;\n  }\n\n  // Diğer istekler için Cache First\n  event.respondWith(\n    caches.match(event.request)\n      .then(cachedResponse => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n        \n        return fetch(event.request)\n          .then(response => {\n            // Başarılı response'u cache'le\n            if (response.status === 200) {\n              const responseClone = response.clone();\n              caches.open(CACHE_NAME).then(cache => {\n                cache.put(event.request, responseClone);\n              });\n            }\n            return response;\n          })\n          .catch(() => {\n            // Network başarısız, offline sayfası göster\n            return caches.match(OFFLINE_URL);\n          });\n      })\n  );\n});\n\n// Background Sync for offline transactions\nself.addEventListener('sync', event => {\n  console.log('[SW] Background sync:', event.tag);\n  \n  if (event.tag === 'background-sync-transactions') {\n    event.waitUntil(syncOfflineTransactions());\n  }\n});\n\n// Push notification\nself.addEventListener('push', event => {\n  console.log('[SW] Push received:', event);\n  \n  const options = {\n    body: event.data ? event.data.text() : 'Yeni bildirim',\n    icon: '/pwa-icon-192.png',\n    badge: '/pwa-icon-192.png',\n    vibrate: [200, 100, 200],\n    data: {\n      url: '/'\n    },\n    actions: [\n      {\n        action: 'open',\n        title: 'Aç',\n        icon: '/pwa-icon-192.png'\n      },\n      {\n        action: 'close',\n        title: 'Kapat'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('FinBot', options)\n  );\n});\n\n// Notification click\nself.addEventListener('notificationclick', event => {\n  console.log('[SW] Notification click:', event);\n  \n  event.notification.close();\n\n  if (event.action === 'open' || !event.action) {\n    event.waitUntil(\n      clients.openWindow(event.notification.data.url || '/')\n    );\n  }\n});\n\n// Offline transaction sync helper\nasync function syncOfflineTransactions() {\n  try {\n    const cache = await caches.open(CACHE_NAME);\n    const offlineTransactions = await cache.match('offline-transactions');\n    \n    if (offlineTransactions) {\n      const transactions = await offlineTransactions.json();\n      \n      for (const transaction of transactions) {\n        try {\n          await fetch('/api/transactions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(transaction)\n          });\n        } catch (error) {\n          console.error('[SW] Failed to sync transaction:', error);\n        }\n      }\n      \n      // Clear offline transactions after sync\n      await cache.delete('offline-transactions');\n      console.log('[SW] Offline transactions synced');\n    }\n  } catch (error) {\n    console.error('[SW] Sync failed:', error);\n  }\n}","size_bytes":5083},"client/public/sw.js":{"content":"const CACHE_NAME = 'finbot-v1';\nconst OFFLINE_URL = '/offline.html';\n\n// Öncelikli cache edilecek dosyalar\nconst PRECACHE_URLS = [\n  '/',\n  '/offline.html',\n  '/manifest.json',\n  '/pwa-icon-192.png',\n  '/pwa-icon-512.png'\n];\n\n// Service Worker kurulum\nself.addEventListener('install', event => {\n  console.log('[SW] Install event');\n  \n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('[SW] Pre-caching offline page');\n        return cache.addAll(PRECACHE_URLS);\n      })\n      .then(() => {\n        console.log('[SW] Skip waiting');\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Service Worker aktivasyonu\nself.addEventListener('activate', event => {\n  console.log('[SW] Activate event');\n  \n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('[SW] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      console.log('[SW] Claiming clients');\n      return self.clients.claim();\n    })\n  );\n});\n\n// Fetch event - Network First stratejisi\nself.addEventListener('fetch', event => {\n  // POST istekleri için cache kullanma\n  if (event.request.method !== 'GET') {\n    return;\n  }\n\n  // API çağrıları için Network First\n  if (event.request.url.includes('/api/')) {\n    event.respondWith(\n      fetch(event.request)\n        .then(response => {\n          // Başarılı response'u cache'le\n          if (response.status === 200) {\n            const responseClone = response.clone();\n            caches.open(CACHE_NAME).then(cache => {\n              cache.put(event.request, responseClone);\n            });\n          }\n          return response;\n        })\n        .catch(() => {\n          // Network başarısız, cache'den dön\n          return caches.match(event.request)\n            .then(cachedResponse => {\n              if (cachedResponse) {\n                return cachedResponse;\n              }\n              // Cache'de yoksa offline sayfası\n              return caches.match(OFFLINE_URL);\n            });\n        })\n    );\n    return;\n  }\n\n  // Diğer istekler için Cache First\n  event.respondWith(\n    caches.match(event.request)\n      .then(cachedResponse => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n        \n        return fetch(event.request)\n          .then(response => {\n            // Başarılı response'u cache'le\n            if (response.status === 200) {\n              const responseClone = response.clone();\n              caches.open(CACHE_NAME).then(cache => {\n                cache.put(event.request, responseClone);\n              });\n            }\n            return response;\n          })\n          .catch(() => {\n            // Network başarısız, offline sayfası göster\n            return caches.match(OFFLINE_URL);\n          });\n      })\n  );\n});\n\n// Background Sync for offline transactions\nself.addEventListener('sync', event => {\n  console.log('[SW] Background sync:', event.tag);\n  \n  if (event.tag === 'background-sync-transactions') {\n    event.waitUntil(syncOfflineTransactions());\n  }\n});\n\n// Push notification\nself.addEventListener('push', event => {\n  console.log('[SW] Push received:', event);\n  \n  const options = {\n    body: event.data ? event.data.text() : 'Yeni bildirim',\n    icon: '/pwa-icon-192.png',\n    badge: '/pwa-icon-192.png',\n    vibrate: [200, 100, 200],\n    data: {\n      url: '/'\n    },\n    actions: [\n      {\n        action: 'open',\n        title: 'Aç',\n        icon: '/pwa-icon-192.png'\n      },\n      {\n        action: 'close',\n        title: 'Kapat'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('FinBot', options)\n  );\n});\n\n// Notification click\nself.addEventListener('notificationclick', event => {\n  console.log('[SW] Notification click:', event);\n  \n  event.notification.close();\n\n  if (event.action === 'open' || !event.action) {\n    event.waitUntil(\n      clients.openWindow(event.notification.data.url || '/')\n    );\n  }\n});\n\n// Offline transaction sync helper\nasync function syncOfflineTransactions() {\n  try {\n    const cache = await caches.open(CACHE_NAME);\n    const offlineTransactions = await cache.match('offline-transactions');\n    \n    if (offlineTransactions) {\n      const transactions = await offlineTransactions.json();\n      \n      for (const transaction of transactions) {\n        try {\n          await fetch('/api/transactions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(transaction)\n          });\n        } catch (error) {\n          console.error('[SW] Failed to sync transaction:', error);\n        }\n      }\n      \n      // Clear offline transactions after sync\n      await cache.delete('offline-transactions');\n      console.log('[SW] Offline transactions synced');\n    }\n  } catch (error) {\n    console.error('[SW] Sync failed:', error);\n  }\n}","size_bytes":5083},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, LogIn, UserPlus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      console.log(\"🔐 Attempting login with:\", data.email);\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"✅ Login successful:\", data);\n      \n      // Invalidate auth queries to refresh user state\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      \n      toast({\n        title: \"Giriş Başarılı\",\n        description: \"Hoş geldiniz! Dashboard'a yönlendiriliyorsunuz...\",\n      });\n      \n      // Redirect to dashboard after successful login\n      setTimeout(() => setLocation(\"/\"), 1000);\n    },\n    onError: (error: any) => {\n      console.error(\"❌ Login error:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Giriş Hatası\",\n        description: error.message || \"Giriş sırasında bir hata oluştu\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md mx-auto shadow-lg\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900\">\n              <LogIn className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">FinBot'a Giriş</CardTitle>\n          <CardDescription>\n            Finansal yönetim platformuna erişim için giriş yapın\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Adresi</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"ornek@email.com\"\n                        autoComplete=\"email\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Şifre</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Şifrenizi girin\"\n                          autoComplete=\"current-password\"\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {loginMutation.error && (\n                <Alert variant=\"destructive\" data-testid=\"alert-login-error\">\n                  <AlertDescription>\n                    {(loginMutation.error as any)?.message || \"Giriş sırasında bir hata oluştu\"}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent\" />\n                    Giriş yapılıyor...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <LogIn className=\"h-4 w-4\" />\n                    Giriş Yap\n                  </div>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center space-y-2\">\n            <Button\n              variant=\"link\"\n              className=\"text-sm\"\n              onClick={() => setLocation(\"/forgot-password\")}\n              data-testid=\"link-forgot-password\"\n            >\n              Şifremi unuttum\n            </Button>\n            \n            <div className=\"text-sm text-muted-foreground\">\n              Hesabınız yok mu?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto font-medium\"\n                onClick={() => setLocation(\"/register\")}\n                data-testid=\"link-register\"\n              >\n                <UserPlus className=\"h-4 w-4 mr-1\" />\n                Kayıt ol\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7180},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { registerSchema, type RegisterRequest } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, UserPlus, LogIn } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<RegisterRequest>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterRequest) => {\n      console.log(\"📝 Attempting registration for:\", data.email);\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"✅ Registration successful:\", data);\n      toast({\n        title: \"Kayıt Başarılı\",\n        description: \"Hesabınız oluşturuldu! Giriş sayfasına yönlendiriliyorsunuz...\",\n      });\n      // Redirect to login after successful registration\n      setTimeout(() => setLocation(\"/login\"), 1500);\n    },\n    onError: (error: any) => {\n      console.error(\"❌ Registration error:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Kayıt Hatası\",\n        description: error.message || \"Kayıt sırasında bir hata oluştu\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterRequest) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-green-50 to-emerald-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md mx-auto shadow-lg\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900\">\n              <UserPlus className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">FinBot'a Kayıt Ol</CardTitle>\n          <CardDescription>\n            Finansal yönetim platformuna yeni hesap oluşturun\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Kullanıcı Adı</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"kullaniciadi\"\n                        autoComplete=\"username\"\n                        data-testid=\"input-username\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Adresi</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"ornek@email.com\"\n                        autoComplete=\"email\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Şifre</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"En az 6 karakter\"\n                          autoComplete=\"new-password\"\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Şifre Tekrarı</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Şifrenizi tekrar girin\"\n                          autoComplete=\"new-password\"\n                          data-testid=\"input-confirm-password\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          data-testid=\"button-toggle-confirm-password\"\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {registerMutation.error && (\n                <Alert variant=\"destructive\" data-testid=\"alert-register-error\">\n                  <AlertDescription>\n                    {(registerMutation.error as any)?.message || \"Kayıt sırasında bir hata oluştu\"}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-register\"\n              >\n                {registerMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent\" />\n                    Kayıt oluşturuluyor...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <UserPlus className=\"h-4 w-4\" />\n                    Hesap Oluştur\n                  </div>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted-foreground\">\n              Zaten hesabınız var mı?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto font-medium\"\n                onClick={() => setLocation(\"/login\")}\n                data-testid=\"link-login\"\n              >\n                <LogIn className=\"h-4 w-4 mr-1\" />\n                Giriş yap\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9164},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { UserRoleType, PermissionType, hasPermission, hasAnyPermission } from '@shared/schema';\n\n// Extend Request type to include user info\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    username: string;\n    role: UserRoleType;\n  };\n}\n\n// Authentication middleware - ensures user is logged in and active (authoritative check)\nexport const requireAuth = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  if (!req.session?.user) {\n    return res.status(401).json({ \n      error: 'Oturum açmanız gerekiyor',\n      code: 'AUTH_REQUIRED' \n    });\n  }\n  \n  try {\n    // Load fresh user data from authoritative storage\n    const { storage } = await import('../storage');\n    const currentUser = await storage.getUser(req.session.user.id);\n    \n    if (!currentUser) {\n      // User no longer exists - destroy session\n      req.session.destroy((err) => {});\n      return res.status(401).json({\n        error: 'Kullanıcı hesabı bulunamadı',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n    \n    // Check if user account is active (authoritative check)\n    if (!currentUser.isActive) {\n      req.session.destroy((err) => {});\n      return res.status(403).json({\n        error: 'Hesabınız pasif durumda. Lütfen yönetici ile iletişime geçin',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    }\n    \n    // Update session with fresh data and attach to request\n    req.session.user = {\n      id: currentUser.id,\n      email: currentUser.email,\n      username: currentUser.username,\n      role: currentUser.role,\n      isActive: currentUser.isActive\n    };\n    req.user = req.session.user as any;\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return res.status(500).json({\n      error: 'Kimlik doğrulama hatası',\n      code: 'AUTH_ERROR'\n    });\n  }\n};\n\n// Role-based authorization middleware\nexport const requireRole = (...allowedRoles: UserRoleType[]) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        error: 'Oturum açmanız gerekiyor',\n        code: 'AUTH_REQUIRED' \n      });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ \n        error: 'Bu işlem için yetkiniz bulunmuyor',\n        code: 'INSUFFICIENT_ROLE',\n        requiredRoles: allowedRoles,\n        userRole: req.user.role\n      });\n    }\n\n    next();\n  };\n};\n\n// Permission-based authorization middleware\nexport const requirePermission = (...requiredPermissions: PermissionType[]) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        error: 'Oturum açmanız gerekiyor',\n        code: 'AUTH_REQUIRED' \n      });\n    }\n\n    const userHasPermission = hasAnyPermission(req.user.role, requiredPermissions);\n    \n    if (!userHasPermission) {\n      return res.status(403).json({ \n        error: 'Bu işlem için yetkiniz bulunmuyor',\n        code: 'INSUFFICIENT_PERMISSION',\n        requiredPermissions,\n        userRole: req.user.role\n      });\n    }\n\n    next();\n  };\n};\n\n// Check specific permission without blocking request\nexport const checkPermission = (req: AuthenticatedRequest, permission: PermissionType): boolean => {\n  if (!req.user) return false;\n  return hasPermission(req.user.role, permission);\n};\n\n// Account type access middleware\nexport const requireAccountTypeAccess = (accountType: 'personal' | 'company') => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        error: 'Oturum açmanız gerekiyor',\n        code: 'AUTH_REQUIRED' \n      });\n    }\n\n    // Admin can access everything\n    if (req.user.role === 'admin') {\n      return next();\n    }\n\n    // Company users can access both\n    if (req.user.role === 'company_user') {\n      return next();\n    }\n\n    // Personal users can only access personal accounts\n    if (req.user.role === 'personal_user' && accountType === 'personal') {\n      return next();\n    }\n\n    return res.status(403).json({ \n      error: `${accountType === 'company' ? 'Şirket' : 'Kişisel'} hesaplarına erişim yetkiniz bulunmuyor`,\n      code: 'ACCOUNT_TYPE_ACCESS_DENIED',\n      accountType,\n      userRole: req.user.role\n    });\n  };\n};\n\n// Optional auth middleware - attaches user if logged in but doesn't require it\nexport const optionalAuth = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  if (req.session?.user) {\n    req.user = req.session.user as any;\n  }\n  next();\n};\n\n// Admin only middleware (shorthand)\nexport const requireAdmin = requireRole('admin');\n\n// Log access attempts for security audit\nexport const logAccess = (action: string) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    console.log(`🔐 [AUTH] ${action} - User: ${req.user?.username || 'anonymous'} (${req.user?.role || 'no-role'}) - IP: ${req.ip}`);\n    next();\n  };\n};","size_bytes":5138},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { UserRoleType, hasPermission, PermissionType } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n  role: UserRoleType;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  hasPermission: (permission: PermissionType) => boolean;\n  hasRole: (role: UserRoleType) => boolean;\n  canAccessRoute: (route: string) => boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [, setLocation] = useLocation();\n\n  // Query current user\n  const { data: userResponse, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false, // Don't retry on 401\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const user = (userResponse as any)?.user || null;\n  const isAuthenticated = !!user && !error;\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest('POST', '/api/auth/logout'),\n    onSuccess: () => {\n      // Redirect to login after logout\n      setLocation('/login');\n    },\n  });\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Permission check helper\n  const checkPermission = (permission: PermissionType): boolean => {\n    if (!user) return false;\n    return hasPermission(user.role, permission);\n  };\n\n  // Role check helper\n  const checkRole = (role: UserRoleType): boolean => {\n    if (!user) return false;\n    return user.role === role;\n  };\n\n  // Route access control based on user role\n  const canAccessRoute = (route: string): boolean => {\n    if (!user) return false;\n\n    // Route-role mapping\n    const routePermissions: Record<string, UserRoleType[]> = {\n      '/': ['admin', 'company_user', 'personal_user'],\n      '/analytics': ['admin', 'company_user', 'personal_user'],\n      '/company': ['admin', 'company_user'], // Personal users can't access company routes\n      '/personal': ['admin', 'company_user', 'personal_user'],\n      '/transfers': ['admin', 'company_user', 'personal_user'],\n      '/fixed-expenses': ['admin', 'company_user', 'personal_user'],\n      '/credit-cards': ['admin', 'company_user', 'personal_user'],\n      '/reports': ['admin', 'company_user', 'personal_user'],\n      '/settings': ['admin', 'company_user', 'personal_user'],\n      '/admin': ['admin'], // Admin-only route\n    };\n\n    const allowedRoles = routePermissions[route];\n    if (!allowedRoles) return true; // Default allow if route not specified\n\n    return allowedRoles.includes(user.role);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        isAuthenticated,\n        hasPermission: checkPermission,\n        hasRole: checkRole,\n        canAccessRoute,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n// Auth guard component for protecting routes\nexport function AuthGuard({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/login');\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect to login\n  }\n\n  return <>{children}</>;\n}\n\n// Role guard component for role-based access\nexport function RoleGuard({ \n  allowedRoles, \n  children,\n  fallback \n}: { \n  allowedRoles: UserRoleType[];\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  const { user } = useAuth();\n\n  if (!user || !allowedRoles.includes(user.role)) {\n    if (fallback) {\n      return <>{fallback}</>;\n    }\n    \n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n            Erişim Engellendi\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Bu sayfayı görüntülemek için gerekli yetkiniz bulunmuyor.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n\n// Route guard component\nexport function RouteGuard({ \n  route, \n  children \n}: { \n  route: string;\n  children: React.ReactNode;\n}) {\n  const { canAccessRoute } = useAuth();\n\n  if (!canAccessRoute(route)) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n            Erişim Engellendi\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Bu sayfayı görüntülemek için gerekli yetkiniz bulunmuyor.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":5502},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { User, UserCheck, UserX, Shield, Users } from \"lucide-react\";\n\ntype User = {\n  id: string;\n  username: string;\n  email: string;\n  role: 'admin' | 'company_user' | 'personal_user';\n  isActive: boolean;\n  createdAt: string;\n  lastLogin: string | null;\n};\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  // Fetch all users\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Role change mutation\n  const roleChangeMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      return await apiRequest(\"PUT\", `/api/admin/users/${userId}/role`, { role });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Kullanıcı rolü başarıyla değiştirildi\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Rol değiştirilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Status change mutation\n  const statusChangeMutation = useMutation({\n    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }) => {\n      return await apiRequest(\"PUT\", `/api/admin/users/${userId}/status`, { isActive });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Kullanıcı durumu başarıyla değiştirildi\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Durum değiştirilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleBadge = (role: string) => {\n    const variants = {\n      admin: \"destructive\",\n      company_user: \"secondary\",\n      personal_user: \"outline\",\n    } as const;\n\n    const labels = {\n      admin: \"Admin\",\n      company_user: \"Şirket Kullanıcısı\",\n      personal_user: \"Kişisel Kullanıcı\",\n    };\n\n    return (\n      <Badge variant={variants[role as keyof typeof variants]}>\n        {labels[role as keyof typeof labels]}\n      </Badge>\n    );\n  };\n\n  const handleRoleChange = (user: User, newRole: string) => {\n    roleChangeMutation.mutate({ userId: user.id, role: newRole });\n  };\n\n  const handleStatusChange = (user: User, isActive: boolean) => {\n    statusChangeMutation.mutate({ userId: user.id, isActive });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Kullanıcılar yükleniyor...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const activeUsers = users.filter(u => u.isActive).length;\n  const adminUsers = users.filter(u => u.role === 'admin').length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Kullanıcı Yönetimi</h1>\n          <p className=\"text-muted-foreground\">\n            Sistem kullanıcılarını yönetin, roller atayın ve hesap durumlarını kontrol edin\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Toplam Kullanıcı</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-users\">{users.length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Aktif Kullanıcı</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-active-users\">{activeUsers}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Admin Kullanıcı</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-admin-users\">{adminUsers}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Kullanıcı Listesi</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableCaption>Sistemdeki tüm kullanıcılar</TableCaption>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Kullanıcı</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Rol</TableHead>\n                <TableHead>Durum</TableHead>\n                <TableHead>Son Giriş</TableHead>\n                <TableHead>İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                  <TableCell className=\"font-medium\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4\" />\n                      <span data-testid={`text-username-${user.id}`}>{user.username}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell data-testid={`text-email-${user.id}`}>{user.email}</TableCell>\n                  <TableCell>\n                    <Select\n                      value={user.role}\n                      onValueChange={(value) => handleRoleChange(user, value)}\n                      disabled={roleChangeMutation.isPending}\n                    >\n                      <SelectTrigger className=\"w-40\" data-testid={`select-role-${user.id}`}>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"company_user\">Şirket Kullanıcısı</SelectItem>\n                        <SelectItem value=\"personal_user\">Kişisel Kullanıcı</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      {user.isActive ? (\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                          <UserCheck className=\"h-3 w-3 mr-1\" />\n                          Aktif\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"bg-red-100 text-red-800\">\n                          <UserX className=\"h-3 w-3 mr-1\" />\n                          Pasif\n                        </Badge>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell data-testid={`text-lastlogin-${user.id}`}>\n                    {user.lastLogin ? new Date(user.lastLogin).toLocaleString('tr-TR') : 'Hiç girmemiş'}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      {user.isActive ? (\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-red-600 hover:text-red-700\"\n                              data-testid={`button-deactivate-${user.id}`}\n                            >\n                              <UserX className=\"h-3 w-3 mr-1\" />\n                              Pasifleştir\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Kullanıcıyı Pasifleştir</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                {user.username} kullanıcısını pasif hale getirmek istediğinizden emin misiniz?\n                                Bu işlem geri alınabilir.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>İptal</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleStatusChange(user, false)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Pasifleştir\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      ) : (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"text-green-600 hover:text-green-700\"\n                          onClick={() => handleStatusChange(user, true)}\n                          disabled={statusChangeMutation.isPending}\n                          data-testid={`button-activate-${user.id}`}\n                        >\n                          <UserCheck className=\"h-3 w-3 mr-1\" />\n                          Aktifleştir\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11345},"client/src/components/kpi-bar.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown, DollarSign } from \"lucide-react\";\n\ninterface KPIBarProps {\n  totalCash: number;\n  totalDebt: number;\n  totalBalance: number;\n  formatCurrency: (amount: string) => string;\n  isLoading?: boolean;\n}\n\nexport default function KPIBar({ \n  totalCash, \n  totalDebt, \n  totalBalance, \n  formatCurrency,\n  isLoading \n}: KPIBarProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        {[1, 2, 3].map(i => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-4 bg-muted rounded w-20 mb-2\" />\n              <div className=\"h-8 bg-muted rounded w-32 mb-1\" />\n              <div className=\"h-3 bg-muted rounded w-16\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const kpiItems = [\n    {\n      title: \"Toplam Nakit\",\n      value: formatCurrency(totalCash.toString()),\n      description: \"Pozitif bakiyeler\",\n      icon: TrendingUp,\n      color: \"text-green-600 dark:text-green-400\",\n      bgColor: \"bg-green-50 dark:bg-green-950\",\n      testId: \"kpi-total-cash\"\n    },\n    {\n      title: \"Toplam Borç\", \n      value: formatCurrency(totalDebt.toString()),\n      description: \"Negatif bakiyeler\",\n      icon: TrendingDown,\n      color: \"text-red-600 dark:text-red-400\",\n      bgColor: \"bg-red-50 dark:bg-red-950\",\n      testId: \"kpi-total-debt\"\n    },\n    {\n      title: \"Net Bakiye\",\n      value: formatCurrency(totalBalance.toString()),\n      description: \"Genel durum\",\n      icon: DollarSign,\n      color: totalBalance >= 0 ? \"text-blue-600 dark:text-blue-400\" : \"text-orange-600 dark:text-orange-400\",\n      bgColor: totalBalance >= 0 ? \"bg-blue-50 dark:bg-blue-950\" : \"bg-orange-50 dark:bg-orange-950\",\n      testId: \"kpi-net-balance\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n      {kpiItems.map((item, index) => {\n        const Icon = item.icon;\n        return (\n          <Card key={index} className=\"border-l-4 border-l-primary/20 hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2 flex-1\">\n                  <p className=\"text-sm font-medium text-muted-foreground\" data-testid={`${item.testId}-title`}>\n                    {item.title}\n                  </p>\n                  <p \n                    className=\"text-2xl font-bold tracking-tight\" \n                    data-testid={`${item.testId}-value`}\n                  >\n                    {item.value}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`${item.testId}-description`}>\n                    {item.description}\n                  </p>\n                </div>\n                <div className={`p-3 rounded-lg ${item.bgColor}`}>\n                  <Icon className={`h-6 w-6 ${item.color}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":3172},"client/src/components/AlertsNotification.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Bell, X, AlertTriangle, Info, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { SystemAlert } from \"@shared/schema\";\n\nconst severityConfig = {\n  low: {\n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\",\n    icon: Info,\n    bgColor: \"border-blue-200 dark:border-blue-800\"\n  },\n  medium: {\n    color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\", \n    icon: AlertTriangle,\n    bgColor: \"border-yellow-200 dark:border-yellow-800\"\n  },\n  high: {\n    color: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\",\n    icon: AlertTriangle,\n    bgColor: \"border-red-200 dark:border-red-800\"\n  }\n};\n\nconst alertTypeLabels = {\n  low_balance: \"Düşük Bakiye\",\n  recurring_payment: \"Tekrarlanan Ödeme\",\n  budget_exceeded: \"Bütçe Aşımı\", \n  monthly_summary: \"Aylık Özet\"\n} as const;\n\nexport function AlertsNotification() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: alerts = [], isLoading } = useQuery({\n    queryKey: ['/api/alerts'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const dismissMutation = useMutation({\n    mutationFn: async (alertId: string) => {\n      const response = await apiRequest('POST', `/api/alerts/${alertId}/dismiss`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: \"Uyarı kapatıldı\",\n        description: \"Uyarı başarıyla kapatıldı\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Uyarı kapatılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const activeAlerts = (alerts as SystemAlert[]).filter(alert => alert.isActive && !alert.isDismissed);\n  const alertCount = activeAlerts.length;\n\n  const handleDismiss = (alertId: string) => {\n    dismissMutation.mutate(alertId);\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('tr-TR', {\n      day: '2-digit',\n      month: '2-digit', \n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getAlertMetadata = (alert: SystemAlert) => {\n    if (!alert.metadata) return null;\n    \n    try {\n      return JSON.parse(alert.metadata);\n    } catch {\n      return null;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Button variant=\"ghost\" size=\"sm\" disabled data-testid=\"alerts-loading\">\n        <Bell className=\"h-5 w-5\" />\n      </Button>\n    );\n  }\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"relative\"\n          data-testid=\"button-alerts\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {alertCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs\"\n              data-testid=\"badge-alert-count\"\n            >\n              {alertCount > 9 ? '9+' : alertCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-96\" align=\"end\" data-testid=\"popover-alerts\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold\" data-testid=\"text-alerts-title\">\n              Sistem Uyarıları\n            </h3>\n            <Badge variant=\"secondary\" data-testid=\"badge-total-alerts\">\n              {alertCount} aktif\n            </Badge>\n          </div>\n\n          {alertCount === 0 ? (\n            <div className=\"text-center py-6\" data-testid=\"text-no-alerts\">\n              <CheckCircle className=\"h-12 w-12 mx-auto text-green-500 mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Hiç aktif uyarınız yok\n              </p>\n            </div>\n          ) : (\n            <ScrollArea className=\"max-h-80\">\n              <div className=\"space-y-3\">\n                {activeAlerts.map((alert, index) => {\n                  const config = severityConfig[alert.severity as keyof typeof severityConfig];\n                  const Icon = config.icon;\n                  const metadata = getAlertMetadata(alert);\n\n                  return (\n                    <div key={alert.id}>\n                      <Card \n                        className={`${config.bgColor} transition-all duration-200 hover:shadow-md`}\n                        data-testid={`card-alert-${alert.id}`}\n                      >\n                        <CardHeader className=\"pb-2\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <Icon className=\"h-4 w-4 flex-shrink-0\" />\n                              <div>\n                                <CardTitle className=\"text-sm\" data-testid={`text-alert-title-${alert.id}`}>\n                                  {alert.title}\n                                </CardTitle>\n                                <div className=\"flex items-center gap-2 mt-1\">\n                                  <Badge \n                                    variant=\"secondary\" \n                                    className={`text-xs ${config.color}`}\n                                    data-testid={`badge-alert-type-${alert.id}`}\n                                  >\n                                    {alertTypeLabels[alert.type as keyof typeof alertTypeLabels] || alert.type}\n                                  </Badge>\n                                  <span className=\"text-xs text-muted-foreground\" data-testid={`text-alert-date-${alert.id}`}>\n                                    {formatDate(alert.createdAt)}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-6 w-6 p-0 hover:bg-red-100 dark:hover:bg-red-900/20\"\n                              onClick={() => handleDismiss(alert.id)}\n                              disabled={dismissMutation.isPending}\n                              data-testid={`button-dismiss-${alert.id}`}\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <CardDescription className=\"text-sm\" data-testid={`text-alert-description-${alert.id}`}>\n                            {alert.description}\n                          </CardDescription>\n                          \n                          {metadata && (\n                            <div className=\"mt-2 text-xs text-muted-foreground\" data-testid={`text-alert-metadata-${alert.id}`}>\n                              {alert.type === 'budget_exceeded' && metadata.category && (\n                                <span>Kategori: {metadata.category} • Harcanan: {parseFloat(metadata.spent).toLocaleString('tr-TR')} TL</span>\n                              )}\n                              {alert.type === 'low_balance' && metadata.currentBalance && (\n                                <span>Güncel Bakiye: {parseFloat(metadata.currentBalance).toLocaleString('tr-TR')} TL</span>\n                              )}\n                              {alert.type === 'recurring_payment' && metadata.amount && (\n                                <span>Tutar: {parseFloat(metadata.amount).toLocaleString('tr-TR')} TL</span>\n                              )}\n                              {alert.type === 'monthly_summary' && metadata.net && (\n                                <span>Net: {parseFloat(metadata.net).toLocaleString('tr-TR')} TL</span>\n                              )}\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                      {index < activeAlerts.length - 1 && <Separator />}\n                    </div>\n                  );\n                })}\n              </div>\n            </ScrollArea>\n          )}\n          \n          {alertCount > 0 && (\n            <div className=\"pt-2 border-t\">\n              <p className=\"text-xs text-muted-foreground text-center\" data-testid=\"text-alerts-footer\">\n                Uyarıları kapatmak için X butonuna tıklayın\n              </p>\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":9349},"client/src/pages/alerts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AlertTriangle, Info, CheckCircle, Bell, Trash2, Calendar, User, Settings, Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { SystemAlert } from \"@shared/schema\";\n\nconst severityConfig = {\n  low: {\n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\",\n    icon: Info,\n    bgColor: \"border-blue-200 dark:border-blue-800\",\n    name: \"Düşük\"\n  },\n  medium: {\n    color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\", \n    icon: AlertTriangle,\n    bgColor: \"border-yellow-200 dark:border-yellow-800\",\n    name: \"Orta\"\n  },\n  high: {\n    color: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\",\n    icon: AlertTriangle,\n    bgColor: \"border-red-200 dark:border-red-800\",\n    name: \"Yüksek\"\n  }\n};\n\nconst alertTypeLabels = {\n  low_balance: \"Düşük Bakiye\",\n  recurring_payment: \"Tekrarlanan Ödeme\",\n  budget_exceeded: \"Bütçe Aşımı\", \n  monthly_summary: \"Aylık Özet\"\n} as const;\n\nexport default function AlertsPage() {\n  const [showDismissed, setShowDismissed] = useState(false);\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [filterSeverity, setFilterSeverity] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  const { data: alerts = [], isLoading } = useQuery<SystemAlert[]>({\n    queryKey: ['/api/alerts/all'],\n  });\n\n  const dismissMutation = useMutation({\n    mutationFn: async (alertId: string) => {\n      const response = await apiRequest('POST', `/api/alerts/${alertId}/dismiss`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts/all'] });\n      toast({\n        title: \"Uyarı kapatıldı\",\n        description: \"Uyarı başarıyla kapatıldı\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Uyarı kapatılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const runChecksMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/alerts/run-checks');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts/all'] });\n      toast({\n        title: \"Kontroller tamamlandı\",\n        description: \"Sistem uyarı kontrolleri başarıyla çalıştırıldı\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\", \n        description: \"Uyarı kontrolleri çalıştırılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const filteredAlerts = (alerts as SystemAlert[]).filter(alert => {\n    const typeMatch = filterType === \"all\" || alert.type === filterType;\n    const severityMatch = filterSeverity === \"all\" || alert.severity === filterSeverity;\n    const dismissedMatch = showDismissed ? true : !alert.isDismissed;\n    \n    return typeMatch && severityMatch && dismissedMatch;\n  });\n\n  const activeAlerts = (alerts as SystemAlert[]).filter(alert => alert.isActive && !alert.isDismissed);\n  const dismissedAlerts = (alerts as SystemAlert[]).filter(alert => alert.isDismissed);\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('tr-TR', {\n      day: '2-digit',\n      month: '2-digit', \n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getAlertMetadata = (alert: SystemAlert) => {\n    if (!alert.metadata) return null;\n    \n    try {\n      return JSON.parse(alert.metadata);\n    } catch {\n      return null;\n    }\n  };\n\n  const handleDismiss = (alertId: string) => {\n    dismissMutation.mutate(alertId);\n  };\n\n  const handleRunChecks = () => {\n    runChecksMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\">Sistem Uyarıları</h1>\n        </div>\n        <div className=\"text-center py-8\">\n          Uyarılar yükleniyor...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"alerts-title\">Sistem Uyarıları</h1>\n          <p className=\"text-muted-foreground mt-1\" data-testid=\"alerts-description\">\n            Finansal durum uyarılarını yönetin ve takip edin\n          </p>\n        </div>\n        <Button \n          onClick={handleRunChecks}\n          disabled={runChecksMutation.isPending}\n          data-testid=\"button-run-checks\"\n        >\n          <Play className=\"w-4 h-4 mr-2\" />\n          {runChecksMutation.isPending ? \"Kontrol Ediliyor...\" : \"Kontrolleri Çalıştır\"}\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card data-testid=\"card-active-alerts\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Aktif Uyarılar</CardTitle>\n            <Bell className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-active-count\">{activeAlerts.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {activeAlerts.filter(a => a.severity === 'high').length} yüksek öncelikli\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-dismissed-alerts\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Kapatılan Uyarılar</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-dismissed-count\">{dismissedAlerts.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Geçmiş uyarılar\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-total-alerts\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Toplam Uyarılar</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-count\">{alerts.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Tüm uyarılar\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card data-testid=\"card-filters\">\n        <CardHeader>\n          <CardTitle>Filtreler</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"show-dismissed\"\n                checked={showDismissed}\n                onCheckedChange={setShowDismissed}\n                data-testid=\"switch-show-dismissed\"\n              />\n              <Label htmlFor=\"show-dismissed\">Kapatılan uyarıları göster</Label>\n            </div>\n            \n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-type\">\n                <SelectValue placeholder=\"Uyarı türü\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tüm Türler</SelectItem>\n                {Object.entries(alertTypeLabels).map(([value, label]) => (\n                  <SelectItem key={value} value={value}>{label}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={filterSeverity} onValueChange={setFilterSeverity}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-severity\">\n                <SelectValue placeholder=\"Önem derecesi\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tüm Dereceler</SelectItem>\n                {Object.entries(severityConfig).map(([value, config]) => (\n                  <SelectItem key={value} value={value}>{config.name}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Alerts List */}\n      <div className=\"space-y-4\">\n        {filteredAlerts.length === 0 ? (\n          <Card data-testid=\"card-no-alerts\">\n            <CardContent className=\"text-center py-8\">\n              <CheckCircle className=\"h-12 w-12 mx-auto text-green-500 mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Hiç uyarı yok</h3>\n              <p className=\"text-muted-foreground\">\n                {showDismissed \n                  ? \"Seçili filtrelere uygun uyarı bulunamadı\"\n                  : \"Aktif uyarınız bulunmuyor\"\n                }\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredAlerts.map((alert) => {\n            const config = severityConfig[alert.severity as keyof typeof severityConfig];\n            const Icon = config.icon;\n            const metadata = getAlertMetadata(alert);\n\n            return (\n              <Card \n                key={alert.id}\n                className={`${config.bgColor} ${alert.isDismissed ? 'opacity-60' : ''} transition-all duration-200 hover:shadow-md`}\n                data-testid={`card-alert-${alert.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                      <div>\n                        <CardTitle className=\"text-lg\" data-testid={`text-alert-title-${alert.id}`}>\n                          {alert.title}\n                        </CardTitle>\n                        <div className=\"flex items-center gap-3 mt-2\">\n                          <Badge \n                            variant=\"secondary\" \n                            className={`${config.color}`}\n                            data-testid={`badge-alert-severity-${alert.id}`}\n                          >\n                            {config.name}\n                          </Badge>\n                          <Badge \n                            variant=\"outline\"\n                            data-testid={`badge-alert-type-${alert.id}`}\n                          >\n                            {alertTypeLabels[alert.type as keyof typeof alertTypeLabels] || alert.type}\n                          </Badge>\n                          {alert.isDismissed && (\n                            <Badge \n                              variant=\"secondary\"\n                              className=\"bg-gray-100 text-gray-600\"\n                              data-testid={`badge-alert-dismissed-${alert.id}`}\n                            >\n                              Kapatılmış\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"text-right text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\" data-testid={`text-alert-created-${alert.id}`}>\n                          <Calendar className=\"h-3 w-3\" />\n                          {formatDate(alert.createdAt)}\n                        </div>\n                        {alert.dismissedAt && (\n                          <div className=\"text-xs mt-1\" data-testid={`text-alert-dismissed-at-${alert.id}`}>\n                            Kapatıldı: {formatDate(alert.dismissedAt)}\n                          </div>\n                        )}\n                      </div>\n                      {!alert.isDismissed && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"hover:bg-red-100 dark:hover:bg-red-900/20\"\n                          onClick={() => handleDismiss(alert.id)}\n                          disabled={dismissMutation.isPending}\n                          data-testid={`button-dismiss-${alert.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-base mb-3\" data-testid={`text-alert-description-${alert.id}`}>\n                    {alert.description}\n                  </CardDescription>\n                  \n                  {metadata && (\n                    <div className=\"bg-muted/50 rounded-lg p-3 text-sm\" data-testid={`text-alert-metadata-${alert.id}`}>\n                      <h4 className=\"font-medium mb-2\">Detaylar:</h4>\n                      <div className=\"space-y-1 text-muted-foreground\">\n                        {alert.type === 'budget_exceeded' && metadata.category && (\n                          <div>\n                            <span className=\"font-medium\">Kategori:</span> {metadata.category}\n                            <br />\n                            <span className=\"font-medium\">Harcanan:</span> {parseFloat(metadata.spent).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">Limit:</span> {parseFloat(metadata.limit).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">İşlem Sayısı:</span> {metadata.transactionCount}\n                          </div>\n                        )}\n                        {alert.type === 'low_balance' && metadata.currentBalance && (\n                          <div>\n                            <span className=\"font-medium\">Güncel Bakiye:</span> {parseFloat(metadata.currentBalance).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">Eşik Değer:</span> {parseFloat(metadata.threshold).toLocaleString('tr-TR')} TL\n                          </div>\n                        )}\n                        {alert.type === 'recurring_payment' && metadata.amount && (\n                          <div>\n                            <span className=\"font-medium\">Tutar:</span> {parseFloat(metadata.amount).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">Son Ödeme:</span> {metadata.daysSinceLastPayment} gün önce\n                          </div>\n                        )}\n                        {alert.type === 'monthly_summary' && metadata.net && (\n                          <div>\n                            <span className=\"font-medium\">Gelir:</span> {parseFloat(metadata.income).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">Gider:</span> {parseFloat(metadata.expenses).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">Net:</span> {parseFloat(metadata.net).toLocaleString('tr-TR')} TL\n                            <br />\n                            <span className=\"font-medium\">İşlem Sayısı:</span> {metadata.transactionCount}\n                          </div>\n                        )}\n                        {alert.accountId && (\n                          <div>\n                            <span className=\"font-medium\">Hesap ID:</span> {alert.accountId}\n                          </div>\n                        )}\n                        {alert.transactionId && (\n                          <div>\n                            <span className=\"font-medium\">İşlem ID:</span> {alert.transactionId}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17174},"server/alert-service.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertSystemAlert, Transaction } from \"@shared/schema\";\n\nexport class AlertService {\n  \n  /**\n   * Check for low balance alerts\n   */\n  async checkLowBalanceAlerts(threshold: number = 100): Promise<void> {\n    try {\n      const accounts = await storage.getAccounts();\n      const existingAlerts = await storage.getSystemAlertsByType('low_balance');\n      \n      for (const account of accounts) {\n        const balance = parseFloat(account.balance);\n        const hasExistingAlert = existingAlerts.some(\n          alert => alert.accountId === account.id && alert.isActive && !alert.isDismissed\n        );\n        \n        // Create alert if balance is low and no existing alert\n        if (balance < threshold && !hasExistingAlert) {\n          const alertData: InsertSystemAlert = {\n            type: 'low_balance',\n            title: 'Düşük Bakiye Uyarısı',\n            description: `${account.bankName} - ${account.accountName} hesabınızın bakiyesi düşük (${balance.toLocaleString('tr-TR')} ${account.currency})`,\n            severity: balance < 50 ? 'high' : 'medium',\n            isActive: true,\n            isDismissed: false,\n            accountId: account.id,\n            metadata: JSON.stringify({ threshold, currentBalance: balance })\n          };\n          \n          await storage.createSystemAlert(alertData);\n          console.log(`Low balance alert created for account ${account.accountName}`);\n        }\n        \n        // Dismiss alerts if balance is now sufficient\n        if (balance >= threshold && hasExistingAlert) {\n          const activeAlert = existingAlerts.find(\n            alert => alert.accountId === account.id && alert.isActive && !alert.isDismissed\n          );\n          if (activeAlert) {\n            await storage.dismissSystemAlert(activeAlert.id);\n            console.log(`Low balance alert dismissed for account ${account.accountName}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error checking low balance alerts:', error);\n    }\n  }\n\n  /**\n   * Check for recurring payment reminders based on transaction patterns\n   */\n  async checkRecurringPaymentReminders(): Promise<void> {\n    try {\n      const transactions = await storage.getTransactions();\n      const existingAlerts = await storage.getSystemAlertsByType('recurring_payment');\n      \n      // Group recurring transactions by description and amount\n      const recurringPatterns = new Map<string, Transaction[]>();\n      \n      transactions.filter(t => t.type === 'expense').forEach(transaction => {\n        const key = `${transaction.description.toLowerCase()}-${transaction.amount}`;\n        if (!recurringPatterns.has(key)) {\n          recurringPatterns.set(key, []);\n        }\n        recurringPatterns.get(key)!.push(transaction);\n      });\n      \n      // Find patterns that occur monthly\n      const now = new Date();\n      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      \n      for (const [key, transactionList] of Array.from(recurringPatterns.entries())) {\n        if (transactionList.length < 2) continue; // Need at least 2 transactions for pattern\n        \n        // Sort by date\n        transactionList.sort((a: Transaction, b: Transaction) => new Date(a.date).getTime() - new Date(b.date).getTime());\n        \n        // Check if it's a monthly pattern\n        const recentTransactions = transactionList.filter(\n          (t: Transaction) => new Date(t.date) >= thirtyDaysAgo\n        );\n        \n        if (recentTransactions.length === 0) {\n          // No recent transactions for this pattern, might be due\n          const lastTransaction = transactionList[transactionList.length - 1];\n          const daysSinceLastPayment = Math.floor(\n            (now.getTime() - new Date(lastTransaction.date).getTime()) / (24 * 60 * 60 * 1000)\n          );\n          \n          // If it's been 25-35 days, create reminder\n          if (daysSinceLastPayment >= 25 && daysSinceLastPayment <= 35) {\n            const hasExistingAlert = existingAlerts.some(\n              alert => alert.description.includes(lastTransaction.description) && \n                      alert.isActive && !alert.isDismissed\n            );\n            \n            if (!hasExistingAlert) {\n              const alertData: InsertSystemAlert = {\n                type: 'recurring_payment',\n                title: 'Tekrar Eden Ödeme Hatırlatması',\n                description: `\"${lastTransaction.description}\" ödemesi yaklaşık ${daysSinceLastPayment} gün önce yapıldı. Yeni ödeme zamanı yaklaşıyor olabilir.`,\n                severity: 'medium',\n                triggerDate: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000), // 5 days from now\n                isActive: true,\n                isDismissed: false,\n                transactionId: lastTransaction.id,\n                metadata: JSON.stringify({ \n                  pattern: key, \n                  daysSinceLastPayment,\n                  amount: lastTransaction.amount\n                })\n              };\n              \n              await storage.createSystemAlert(alertData);\n              console.log(`Recurring payment reminder created for: ${lastTransaction.description}`);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error checking recurring payment reminders:', error);\n    }\n  }\n\n  /**\n   * Check for budget exceeded alerts based on category spending\n   */\n  async checkBudgetAlerts(): Promise<void> {\n    try {\n      const transactions = await storage.getTransactions();\n      const existingAlerts = await storage.getSystemAlertsByType('budget_exceeded');\n      \n      // Monthly spending by category (simple budget check)\n      const now = new Date();\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      \n      const monthlySpending = new Map<string, { amount: number; count: number }>();\n      \n      transactions.filter(t => \n        t.type === 'expense' && \n        new Date(t.date) >= startOfMonth &&\n        t.category\n      ).forEach(transaction => {\n        const category = transaction.category!;\n        if (!monthlySpending.has(category)) {\n          monthlySpending.set(category, { amount: 0, count: 0 });\n        }\n        const spending = monthlySpending.get(category)!;\n        spending.amount += parseFloat(transaction.amount);\n        spending.count++;\n      });\n\n      // Simple budget thresholds (could be configurable)\n      const budgetLimits = {\n        'food': 2000,\n        'transportation': 800,\n        'shopping': 1500,\n        'entertainment': 1000,\n        'utilities': 1200\n      };\n\n      for (const [category, spending] of Array.from(monthlySpending.entries())) {\n        const limit = budgetLimits[category as keyof typeof budgetLimits];\n        if (!limit) continue;\n        \n        const percentage = (spending.amount / limit) * 100;\n        \n        if (percentage >= 90) {\n          const hasExistingAlert = existingAlerts.some(\n            alert => alert.metadata?.includes(category) && \n                    alert.isActive && !alert.isDismissed\n          );\n          \n          if (!hasExistingAlert) {\n            const alertData: InsertSystemAlert = {\n              type: 'budget_exceeded',\n              title: percentage >= 100 ? 'Bütçe Aşıldı!' : 'Bütçe Uyarısı',\n              description: `${category} kategorisinde bu ay ${spending.amount.toLocaleString('tr-TR')} TL harcama yaptınız (Bütçe: ${limit.toLocaleString('tr-TR')} TL, %${percentage.toFixed(0)})`,\n              severity: percentage >= 100 ? 'high' : 'medium',\n              isActive: true,\n              isDismissed: false,\n              metadata: JSON.stringify({ \n                category, \n                spent: spending.amount, \n                limit, \n                percentage: percentage.toFixed(2),\n                transactionCount: spending.count\n              })\n            };\n            \n            await storage.createSystemAlert(alertData);\n            console.log(`Budget alert created for category: ${category}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error checking budget alerts:', error);\n    }\n  }\n\n  /**\n   * Generate end-of-month financial summary alert\n   */\n  async createMonthlyFinancialSummary(): Promise<void> {\n    try {\n      const now = new Date();\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n      \n      // Check if we're in the last 3 days of the month\n      const daysUntilEndOfMonth = Math.ceil((endOfMonth.getTime() - now.getTime()) / (24 * 60 * 60 * 1000));\n      \n      if (daysUntilEndOfMonth <= 3) {\n        const existingAlerts = await storage.getSystemAlertsByType('monthly_summary');\n        const hasThisMonthSummary = existingAlerts.some(\n          alert => new Date(alert.createdAt).getMonth() === now.getMonth() &&\n                   new Date(alert.createdAt).getFullYear() === now.getFullYear() &&\n                   alert.isActive\n        );\n        \n        if (!hasThisMonthSummary) {\n          const transactions = await storage.getTransactions();\n          const monthlyTransactions = transactions.filter(\n            t => new Date(t.date) >= startOfMonth\n          );\n          \n          const totalIncome = monthlyTransactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n          \n          const totalExpenses = monthlyTransactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n          \n          const netAmount = totalIncome - totalExpenses;\n          \n          const alertData: InsertSystemAlert = {\n            type: 'monthly_summary',\n            title: `${now.toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })} Ayı Finansal Özeti`,\n            description: `Gelir: ${totalIncome.toLocaleString('tr-TR')} TL, Gider: ${totalExpenses.toLocaleString('tr-TR')} TL, Net: ${netAmount.toLocaleString('tr-TR')} TL`,\n            severity: netAmount < 0 ? 'medium' : 'low',\n            isActive: true,\n            isDismissed: false,\n            metadata: JSON.stringify({ \n              income: totalIncome,\n              expenses: totalExpenses,\n              net: netAmount,\n              transactionCount: monthlyTransactions.length,\n              month: now.getMonth(),\n              year: now.getFullYear()\n            })\n          };\n          \n          await storage.createSystemAlert(alertData);\n          console.log('Monthly financial summary alert created');\n        }\n      }\n    } catch (error) {\n      console.error('Error creating monthly financial summary:', error);\n    }\n  }\n\n  /**\n   * Run all alert checks\n   */\n  async runAllChecks(): Promise<void> {\n    console.log('Running system alert checks...');\n    \n    await Promise.all([\n      this.checkLowBalanceAlerts(),\n      this.checkRecurringPaymentReminders(),\n      this.checkBudgetAlerts(),\n      this.createMonthlyFinancialSummary()\n    ]);\n    \n    console.log('System alert checks completed');\n  }\n}\n\n// Export singleton instance\nexport const alertService = new AlertService();","size_bytes":11278},"client/src/components/TransactionJsonManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Download, Upload, FileCheck, Calendar, BarChart3, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface JsonStatus {\n  exists: boolean;\n  isValid: boolean;\n  transactionCount?: number;\n  lastExport?: string;\n}\n\nexport function TransactionJsonManager() {\n  const [overwriteExisting, setOverwriteExisting] = useState(false);\n  const [dateRange, setDateRange] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  const { toast } = useToast();\n\n  // JSON dosya durumu sorgula\n  const { data: jsonStatus, refetch: refetchStatus } = useQuery<JsonStatus>({\n    queryKey: ['/api/transactions/json-status'],\n  });\n\n  // JSON'a dışa aktarma\n  const exportMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/transactions/export-json');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      refetchStatus();\n      toast({\n        title: \"Dışa aktarma başarılı\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Dışa aktarma hatası\",\n        description: \"İşlemler JSON'a aktarılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // JSON'dan içe aktarma  \n  const importMutation = useMutation({\n    mutationFn: async (overwrite: boolean) => {\n      const response = await apiRequest('POST', '/api/transactions/import-json', {\n        overwriteExisting: overwrite\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n      refetchStatus();\n      toast({\n        title: \"İçe aktarma başarılı\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"İçe aktarma hatası\",\n        description: \"JSON'dan işlemler içe aktarılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Tarih aralığına göre dışa aktarma\n  const exportByDateMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/transactions/export-json-by-date', {\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Tarihli dışa aktarma başarılı\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Dışa aktarma hatası\",\n        description: \"Tarihli işlemler dışa aktarılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Kategori analizi dışa aktarma\n  const exportCategoryAnalysisMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/transactions/export-category-analysis');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Kategori analizi başarılı\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Analiz hatası\",\n        description: \"Kategori analizi dışa aktarılırken bir hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleExport = () => {\n    exportMutation.mutate();\n  };\n\n  const handleImport = () => {\n    importMutation.mutate(overwriteExisting);\n  };\n\n  const handleExportByDate = () => {\n    if (!dateRange.startDate || !dateRange.endDate) {\n      toast({\n        title: \"Tarih aralığı gerekli\",\n        description: \"Lütfen başlangıç ve bitiş tarihleri seçin\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    exportByDateMutation.mutate();\n  };\n\n  const handleExportCategoryAnalysis = () => {\n    exportCategoryAnalysisMutation.mutate();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('tr-TR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"json-manager-title\">\n          İşlem Takibi (transactions.json)\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"json-manager-description\">\n          İşlem verilerinizi JSON formatında yedekleyin ve geri yükleyin\n        </p>\n      </div>\n\n      {/* JSON Dosya Durumu */}\n      <Card data-testid=\"card-json-status\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileCheck className=\"h-5 w-5\" />\n              JSON Dosya Durumu\n            </CardTitle>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => refetchStatus()}\n              data-testid=\"button-refresh-status\"\n            >\n              Yenile\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4\">\n            {jsonStatus?.exists ? (\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <Badge variant=\"default\" data-testid=\"badge-file-exists\">\n                  Dosya Mevcut\n                </Badge>\n                {jsonStatus.isValid && (\n                  <Badge variant=\"secondary\" data-testid=\"badge-file-valid\">\n                    {jsonStatus.transactionCount} İşlem\n                  </Badge>\n                )}\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                <Badge variant=\"outline\" data-testid=\"badge-file-not-exists\">\n                  Dosya Bulunamadı\n                </Badge>\n              </div>\n            )}\n            \n            {jsonStatus?.lastExport && (\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-last-export\">\n                Son Dışa Aktarma: {formatDate(jsonStatus.lastExport)}\n              </span>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Temel Dışa/İçe Aktarma */}\n      <Card data-testid=\"card-basic-operations\">\n        <CardHeader>\n          <CardTitle>Temel İşlemler</CardTitle>\n          <CardDescription>\n            Tüm işlem verilerinizi dışa aktarın veya mevcut JSON dosyasından içe aktarın\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-3\">\n            <Button \n              onClick={handleExport}\n              disabled={exportMutation.isPending}\n              data-testid=\"button-export-json\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              {exportMutation.isPending ? \"Dışa Aktarılıyor...\" : \"JSON'a Dışa Aktar\"}\n            </Button>\n            \n            <Button \n              variant=\"outline\"\n              onClick={handleImport}\n              disabled={importMutation.isPending || !jsonStatus?.exists}\n              data-testid=\"button-import-json\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              {importMutation.isPending ? \"İçe Aktarılıyor...\" : \"JSON'dan İçe Aktar\"}\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"overwrite-existing\"\n              checked={overwriteExisting}\n              onCheckedChange={setOverwriteExisting}\n              data-testid=\"switch-overwrite-existing\"\n            />\n            <Label htmlFor=\"overwrite-existing\" className=\"text-sm\">\n              Mevcut işlemlerin üzerine yaz\n            </Label>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tarih Aralığına Göre Dışa Aktarma */}\n      <Card data-testid=\"card-date-range-export\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Tarih Aralığına Göre Dışa Aktarma\n          </CardTitle>\n          <CardDescription>\n            Belirli bir tarih aralığındaki işlemleri ayrı bir JSON dosyasına aktarın\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"start-date\">Başlangıç Tarihi</Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"end-date\">Bitiş Tarihi</Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                data-testid=\"input-end-date\"\n              />\n            </div>\n          </div>\n          \n          <Button \n            onClick={handleExportByDate}\n            disabled={exportByDateMutation.isPending || !dateRange.startDate || !dateRange.endDate}\n            data-testid=\"button-export-by-date\"\n          >\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            {exportByDateMutation.isPending ? \"Dışa Aktarılıyor...\" : \"Tarihli Dışa Aktarma\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      {/* Kategori Analizi Dışa Aktarma */}\n      <Card data-testid=\"card-category-analysis\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Kategori Analizi\n          </CardTitle>\n          <CardDescription>\n            İşlemlerinizi kategorilere göre analiz edin ve detaylı rapor oluşturun\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button \n            onClick={handleExportCategoryAnalysis}\n            disabled={exportCategoryAnalysisMutation.isPending}\n            variant=\"secondary\"\n            data-testid=\"button-export-category-analysis\"\n          >\n            <BarChart3 className=\"h-4 w-4 mr-2\" />\n            {exportCategoryAnalysisMutation.isPending ? \"Analiz Ediliyor...\" : \"Kategori Analizi Oluştur\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Kullanım Notları */}\n      <Card data-testid=\"card-usage-notes\">\n        <CardHeader>\n          <CardTitle>Kullanım Notları</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <p>• JSON dışa aktarma işlemi tüm işlem verilerinizi ve hesap bilgilerini içerir</p>\n            <p>• İçe aktarma sırasında eksik hesaplar atlanır ve hata raporlanır</p>\n            <p>• Tarihli dışa aktarma ile belirli dönemler için yedek alabilirsiniz</p>\n            <p>• Kategori analizi harcama alışkanlıklarınız hakkında detaylı bilgi sunar</p>\n            <p>• JSON dosyaları manuel olarak düzenlenebilir ancak dikkatli olun</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12127},"server/transaction-json-service.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\nimport { storage } from './storage';\nimport { transactionJsonFileSchema } from '@shared/schema';\nimport type { Transaction, InsertTransaction } from '@shared/schema';\n\nexport class TransactionJsonService {\n  private readonly transactionsFilePath = path.join(process.cwd(), 'transactions.json');\n  \n  /**\n   * Tüm işlemleri transactions.json dosyasına dışa aktar\n   */\n  async exportTransactionsToJson(): Promise<{ success: boolean; message: string; filePath?: string }> {\n    try {\n      const transactions = await storage.getTransactions();\n      const accounts = await storage.getAccounts();\n      \n      // İşlemleri hesap bilgileriyle zenginleştir\n      const enrichedTransactions = transactions.map(transaction => {\n        const account = accounts.find(acc => acc.id === transaction.accountId);\n        return {\n          ...transaction,\n          accountInfo: account ? {\n            bankName: account.bankName,\n            accountName: account.accountName,\n            type: account.type\n          } : null\n        };\n      });\n\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        totalTransactions: transactions.length,\n        transactions: enrichedTransactions,\n        summary: {\n          totalIncome: transactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0),\n          totalExpenses: transactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0),\n          totalTransfers: transactions\n            .filter(t => t.type === 'transfer_out')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0)\n        }\n      };\n\n      await fs.writeFile(\n        this.transactionsFilePath, \n        JSON.stringify(exportData, null, 2), \n        'utf8'\n      );\n\n      console.log(`${transactions.length} işlem transactions.json dosyasına aktarıldı`);\n      \n      return {\n        success: true,\n        message: `${transactions.length} işlem başarıyla JSON dosyasına aktarıldı`,\n        filePath: this.transactionsFilePath\n      };\n    } catch (error) {\n      console.error('JSON dışa aktarma hatası:', error);\n      return {\n        success: false,\n        message: `JSON dışa aktarma hatası: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`\n      };\n    }\n  }\n\n  /**\n   * transactions.json dosyasından işlemleri içe aktar\n   */\n  async importTransactionsFromJson(overwriteExisting = false): Promise<{ success: boolean; message: string; importedCount?: number }> {\n    try {\n      // Dosya varlığını kontrol et\n      try {\n        await fs.access(this.transactionsFilePath);\n      } catch {\n        return {\n          success: false,\n          message: 'transactions.json dosyası bulunamadı'\n        };\n      }\n\n      const fileContent = await fs.readFile(this.transactionsFilePath, 'utf8');\n      const rawData = JSON.parse(fileContent);\n\n      // JSON dosya yapısını Zod ile doğrula\n      const validation = transactionJsonFileSchema.safeParse(rawData);\n      if (!validation.success) {\n        return {\n          success: false,\n          message: `Geçersiz JSON dosyası formatı: ${validation.error.issues.map(i => i.message).join(', ')}`\n        };\n      }\n\n      const importData = validation.data;\n\n      const existingTransactions = await storage.getTransactions();\n      const existingIds = new Set(existingTransactions.map(t => t.id));\n      \n      let importedCount = 0;\n      let updatedCount = 0;\n      let skippedCount = 0;\n      const errors: string[] = [];\n\n      // Transfer çiftlerini takip et\n      const transferPairs = new Map<string, Transaction[]>();\n\n      for (const transactionData of importData.transactions) {\n        try {\n          // Hesap bilgilerini temizle (sadece işlem verisi alınacak)\n          const { accountInfo, ...cleanTransaction } = transactionData;\n          \n          // ID çakışması kontrolü\n          if (existingIds.has(cleanTransaction.id) && !overwriteExisting) {\n            skippedCount++;\n            continue;\n          }\n\n          // Hesap varlığını kontrol et\n          const account = await storage.getAccount(cleanTransaction.accountId);\n          if (!account) {\n            errors.push(`Hesap bulunamadı: ${cleanTransaction.accountId}`);\n            continue;\n          }\n\n          // İşlem verisini hazırla (ID ve tarih korunur)\n          const insertData: InsertTransaction = {\n            accountId: cleanTransaction.accountId,\n            type: cleanTransaction.type,\n            amount: cleanTransaction.amount,\n            description: cleanTransaction.description,\n            category: cleanTransaction.category || null,\n            virmanPairId: cleanTransaction.virmanPairId || null\n          };\n\n          // Transfer işlemlerini özel olarak işle\n          if (cleanTransaction.type === 'transfer_in' || cleanTransaction.type === 'transfer_out') {\n            if (cleanTransaction.virmanPairId) {\n              if (!transferPairs.has(cleanTransaction.virmanPairId)) {\n                transferPairs.set(cleanTransaction.virmanPairId, []);\n              }\n              transferPairs.get(cleanTransaction.virmanPairId)!.push({\n                ...cleanTransaction,\n                date: typeof cleanTransaction.date === 'string' ? new Date(cleanTransaction.date) : cleanTransaction.date\n              });\n            }\n            continue; // Transfer işlemlerini daha sonra çiftler halinde işle\n          }\n\n          // Normal işlemler için (income/expense) balance-adjusting operation kullan\n          let balanceAdjustment = 0;\n          const amount = parseFloat(cleanTransaction.amount);\n\n          if (cleanTransaction.type === 'income') {\n            balanceAdjustment = amount;\n          } else if (cleanTransaction.type === 'expense') {\n            balanceAdjustment = -amount;\n          }\n\n          if (overwriteExisting && existingIds.has(cleanTransaction.id)) {\n            // Mevcut işlemi güncelle (sadece balance adjustment olmadan transaction record güncelle)\n            // TODO: Implement transaction update method in storage\n            console.log(`İşlem güncelleniyor: ${cleanTransaction.id}`);\n            updatedCount++;\n          } else {\n            // Yeni işlem oluştur ve bakiye ayarlaması yap\n            const transaction = await storage.performTransaction(insertData, balanceAdjustment);\n            importedCount++;\n          }\n\n        } catch (error) {\n          errors.push(`İşlem hatası (ID: ${transactionData.id}): ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`);\n        }\n      }\n\n      // Transfer çiftlerini işle\n      for (const [virmanPairId, transferTransactions] of Array.from(transferPairs.entries())) {\n        try {\n          if (transferTransactions.length !== 2) {\n            errors.push(`Eksik transfer çifti (virmanPairId: ${virmanPairId}): ${transferTransactions.length} işlem`);\n            continue;\n          }\n\n          const outTransaction = transferTransactions.find((t: any) => t.type === 'transfer_out');\n          const inTransaction = transferTransactions.find((t: any) => t.type === 'transfer_in');\n\n          if (!outTransaction || !inTransaction) {\n            errors.push(`Geçersiz transfer çifti (virmanPairId: ${virmanPairId})`);\n            continue;\n          }\n\n          // Transfer pair çakışması kontrolü\n          const outExists = existingIds.has(outTransaction.id);\n          const inExists = existingIds.has(inTransaction.id);\n\n          if ((outExists || inExists) && !overwriteExisting) {\n            skippedCount += 2;\n            continue;\n          }\n\n          // Transfer işlemini gerçekleştir\n          const amount = parseFloat(outTransaction.amount);\n          const result = await storage.performTransfer(\n            outTransaction.accountId,\n            inTransaction.accountId,\n            amount,\n            outTransaction.description.replace('Virman: ', ''),\n            virmanPairId\n          );\n\n          importedCount += 2; // İki işlem eklendi\n\n        } catch (error) {\n          errors.push(`Transfer çifti hatası (virmanPairId: ${virmanPairId}): ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`);\n        }\n      }\n\n      let message = `${importedCount} işlem başarıyla içe aktarıldı`;\n      if (updatedCount > 0) {\n        message += `, ${updatedCount} işlem güncellendi`;\n      }\n      if (skippedCount > 0) {\n        message += `, ${skippedCount} işlem atlandı (mevcut)`;\n      }\n      if (errors.length > 0) {\n        message += `, ${errors.length} hata oluştu`;\n        console.warn('İçe aktarma hataları:', errors);\n      }\n\n      return {\n        success: true,\n        message,\n        importedCount\n      };\n\n    } catch (error) {\n      console.error('JSON içe aktarma hatası:', error);\n      return {\n        success: false,\n        message: `JSON içe aktarma hatası: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`\n      };\n    }\n  }\n\n  /**\n   * transactions.json dosyasının varlığını ve içeriğini kontrol et\n   */\n  async checkJsonFile(): Promise<{ exists: boolean; isValid: boolean; transactionCount?: number; lastExport?: string }> {\n    try {\n      await fs.access(this.transactionsFilePath);\n      \n      const fileContent = await fs.readFile(this.transactionsFilePath, 'utf8');\n      const data = JSON.parse(fileContent);\n      \n      return {\n        exists: true,\n        isValid: data.transactions && Array.isArray(data.transactions),\n        transactionCount: data.totalTransactions || data.transactions?.length || 0,\n        lastExport: data.exportDate\n      };\n    } catch (error) {\n      return {\n        exists: false,\n        isValid: false\n      };\n    }\n  }\n\n  /**\n   * Belirli tarih aralığındaki işlemleri JSON'a aktar\n   */\n  async exportTransactionsByDateRange(startDate: Date, endDate: Date): Promise<{ success: boolean; message: string; filePath?: string }> {\n    try {\n      const allTransactions = await storage.getTransactions();\n      const accounts = await storage.getAccounts();\n      \n      // Tarih aralığına göre filtrele\n      const filteredTransactions = allTransactions.filter(transaction => {\n        const transactionDate = new Date(transaction.date);\n        return transactionDate >= startDate && transactionDate <= endDate;\n      });\n\n      if (filteredTransactions.length === 0) {\n        return {\n          success: false,\n          message: 'Belirtilen tarih aralığında işlem bulunamadı'\n        };\n      }\n\n      // İşlemleri hesap bilgileriyle zenginleştir\n      const enrichedTransactions = filteredTransactions.map(transaction => {\n        const account = accounts.find(acc => acc.id === transaction.accountId);\n        return {\n          ...transaction,\n          accountInfo: account ? {\n            bankName: account.bankName,\n            accountName: account.accountName,\n            type: account.type\n          } : null\n        };\n      });\n\n      const fileName = `transactions_${startDate.toISOString().split('T')[0]}_to_${endDate.toISOString().split('T')[0]}.json`;\n      const filePath = path.join(process.cwd(), fileName);\n\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        dateRange: {\n          start: startDate.toISOString(),\n          end: endDate.toISOString()\n        },\n        totalTransactions: filteredTransactions.length,\n        transactions: enrichedTransactions,\n        summary: {\n          totalIncome: filteredTransactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0),\n          totalExpenses: filteredTransactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0),\n          totalTransfers: filteredTransactions\n            .filter(t => t.type === 'transfer_out')\n            .reduce((sum, t) => sum + parseFloat(t.amount), 0)\n        }\n      };\n\n      await fs.writeFile(filePath, JSON.stringify(exportData, null, 2), 'utf8');\n\n      return {\n        success: true,\n        message: `${filteredTransactions.length} işlem ${fileName} dosyasına aktarıldı`,\n        filePath\n      };\n      \n    } catch (error) {\n      console.error('Tarihli JSON dışa aktarma hatası:', error);\n      return {\n        success: false,\n        message: `JSON dışa aktarma hatası: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`\n      };\n    }\n  }\n\n  /**\n   * Kategori bazlı işlem analizi ile JSON dışa aktar\n   */\n  async exportCategoryAnalysisToJson(): Promise<{ success: boolean; message: string; filePath?: string }> {\n    try {\n      const transactions = await storage.getTransactions();\n      const accounts = await storage.getAccounts();\n      \n      // Kategori bazlı analiz\n      const categoryAnalysis = new Map<string, {\n        totalAmount: number;\n        transactionCount: number;\n        transactions: Transaction[];\n      }>();\n\n      // Kategorize et\n      transactions.forEach(transaction => {\n        const category = transaction.category || 'Kategorisiz';\n        if (!categoryAnalysis.has(category)) {\n          categoryAnalysis.set(category, {\n            totalAmount: 0,\n            transactionCount: 0,\n            transactions: []\n          });\n        }\n        \n        const categoryData = categoryAnalysis.get(category)!;\n        categoryData.totalAmount += parseFloat(transaction.amount);\n        categoryData.transactionCount++;\n        categoryData.transactions.push(transaction);\n      });\n\n      const analysisData = {\n        exportDate: new Date().toISOString(),\n        totalCategories: categoryAnalysis.size,\n        categoryBreakdown: Object.fromEntries(\n          Array.from(categoryAnalysis.entries()).map(([category, data]) => [\n            category,\n            {\n              totalAmount: data.totalAmount,\n              transactionCount: data.transactionCount,\n              averageAmount: data.totalAmount / data.transactionCount,\n              transactions: data.transactions.map(t => {\n                const account = accounts.find(acc => acc.id === t.accountId);\n                return {\n                  ...t,\n                  accountInfo: account ? {\n                    bankName: account.bankName,\n                    accountName: account.accountName,\n                    type: account.type\n                  } : null\n                };\n              })\n            }\n          ])\n        )\n      };\n\n      const fileName = 'transaction_category_analysis.json';\n      const filePath = path.join(process.cwd(), fileName);\n\n      await fs.writeFile(filePath, JSON.stringify(analysisData, null, 2), 'utf8');\n\n      return {\n        success: true,\n        message: `${categoryAnalysis.size} kategori analizi ${fileName} dosyasına aktarıldı`,\n        filePath\n      };\n      \n    } catch (error) {\n      console.error('Kategori analizi JSON dışa aktarma hatası:', error);\n      return {\n        success: false,\n        message: `JSON dışa aktarma hatası: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`\n      };\n    }\n  }\n}\n\n// Singleton instance\nexport const transactionJsonService = new TransactionJsonService();","size_bytes":15330}},"version":1}